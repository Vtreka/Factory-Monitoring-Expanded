{"events":[],"handlers":[{"code":"local T=text\r\n\r\nindy_type ={\"metalwork\",\"printer\",\"chemical\",\"glass\",\"refiner\",\"smelter\",\"assembler\", \"electronics\", \"honey\", \"recycler\"}\r\n\r\n--local check=string.find(T,\"/help\")\r\n\r\nif string.find(T,\"help\") then\r\n system.print(\"--- Industry locator ---\")   \r\n system.print(\"Syntax:\")\r\n system.print(\"[machine_type] [tier] [number]\")\r\n system.print(\"ex: assembler t1 1\")\r\n system.print(\"possible machine types: metalwork, printer, chemical, glass, refiner, honey, smelter, electronics, assembler, recycler\")\r\n system.print(\"to clear an arrow type: clear [index]\")\r\n system.print(\"ex: clear 18\")\r\n system.print(\"\")\r\n system.print(\"For assistance contact Vtreka in game or on discord\")    \r\nend\r\n\r\nif string.find(T,\"clear\") then\r\n    str = string.gsub(T, \"clear\" ,\"\")\r\n core_unit[1].deleteSticker(tonumber(str))\r\nend\r\n\r\nif string.find(T, indy_type[1]) then\r\n   str = string.gsub(T, indy_type[1],\"\")\r\n   \r\n       if string.find(str, \"t1\") then \r\n          str = string.gsub(str, \"t1\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(metalwork1[iid])\r\n          --core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\")\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end\r\n        if string.find(str, \"t2\") then \r\n          str = string.gsub(str, \"t2\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(metalwork2[iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end\r\n        if string.find(str, \"t3\") then \r\n          str = string.gsub(str, \"t3\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(metalwork3[iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end\r\n        if string.find(str, \"t4\") then \r\n          str = string.gsub(str, \"t4\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(metalwork4[iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end\r\n    \r\nelseif string.find(T, indy_type[2]) then\r\n   str = string.gsub(T, indy_type[2],\"\")\r\n   \r\n       if string.find(str, \"t1\") then \r\n          str = string.gsub(str, \"t1\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(printer1[iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end\r\n        if string.find(str, \"t2\") then \r\n          str = string.gsub(str, \"t2\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(printer2[id])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end\r\n        if string.find(str, \"t3\") then \r\n          str = string.gsub(str, \"t3\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(printer3[iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end\r\n        if string.find(str, \"t4\") then \r\n          str = string.gsub(str, \"t4\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(printer4[iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end\r\n\r\nelseif string.find(T, indy_type[3]) then\r\n   str = string.gsub(T, indy_type[3],\"\")\r\n   \r\n       if string.find(str, \"t1\") then \r\n          str = string.gsub(str, \"t1\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(chemical1[iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+6,\"down\"))\r\n          end\r\n        if string.find(str, \"t2\") then \r\n          str = string.gsub(str, \"t2\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(chemical2[iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+6,\"down\"))\r\n          end\r\n        if string.find(str, \"t3\") then \r\n          str = string.gsub(str, \"t3\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(chemical3[iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+6,\"down\"))\r\n          end\r\n        if string.find(str, \"t4\") then \r\n          str = string.gsub(str, \"t4\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(chemical4[iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+6,\"down\"))\r\n          end\r\n\r\nelseif string.find(T, indy_type[4]) then\r\n   str = string.gsub(T, indy_type[4],\"\")\r\n   \r\n       if string.find(str, \"t1\") then \r\n          str = string.gsub(str, \"t1\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(glass1[iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+6,\"down\"))\r\n          end\r\n        if string.find(str, \"t2\") then \r\n          str = string.gsub(str, \"t2\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(glass2[iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+6,\"down\"))\r\n          end\r\n        if string.find(str, \"t3\") then \r\n          str = string.gsub(str, \"t3\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(glass3[iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+6,\"down\"))\r\n          end\r\n        if string.find(str, \"t4\") then \r\n          str = string.gsub(str, \"t4\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(glass4[iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+6,\"down\"))\r\n          end     \r\n\r\nelseif string.find(T, indy_type[5]) then\r\n   str = string.gsub(T, indy_type[5],\"\")\r\n   \r\n       if string.find(str, \"t1\") then \r\n          str = string.gsub(str, \"t1\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(refiner1[iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end\r\n        if string.find(str, \"t2\") then \r\n          str = string.gsub(str, \"t2\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(refiner2[iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end\r\n        if string.find(str, \"t3\") then \r\n          str = string.gsub(str, \"t3\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(refiner3[iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end\r\n        if string.find(str, \"t4\") then \r\n          str = string.gsub(str, \"t4\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(refiner4[iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end\r\n\r\nelseif string.find(T, indy_type[6]) then\r\n   str = string.gsub(T, indy_type[6],\"\")\r\n   \r\n       if string.find(str, \"t1\") then \r\n          str = string.gsub(str, \"t1\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(smelter1[iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end\r\n        if string.find(str, \"t2\") then \r\n          str = string.gsub(str, \"t2\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(smelter2[iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end\r\n        if string.find(str, \"t3\") then \r\n          str = string.gsub(str, \"t3\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(smelter3[iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end\r\n        if string.find(str, \"t4\") then \r\n          str = string.gsub(str, \"t4\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(smelter4[iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end\r\n\r\nelseif string.find(T, indy_type[7]) then\r\n   str = string.gsub(T, indy_type[7],\"\")\r\n   \r\n       if string.find(str, \"t1\") then \r\n          str = string.gsub(str, \"t1\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(assembly1[iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end\r\n        if string.find(str, \"t2\") then \r\n          str = string.gsub(str, \"t2\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(assembly2[iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end\r\n        if string.find(str, \"t3\") then \r\n          str = string.gsub(str, \"t3\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(assembly3[iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end\r\n        if string.find(str, \"t4\") then \r\n          str = string.gsub(str, \"t4\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(assembly4[iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end\r\n\r\nelseif string.find(T, indy_type[8]) then\r\n   str = string.gsub(T, indy_type[8],\"\")\r\n   \r\n       if string.find(str, \"t1\") then \r\n          str = string.gsub(str, \"t1\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(electronics[1][iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end\r\n        if string.find(str, \"t2\") then \r\n          str = string.gsub(str, \"t2\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(electronics[2][iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end\r\n        if string.find(str, \"t3\") then \r\n          str = string.gsub(str, \"t3\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(electronics[3][iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end\r\n        if string.find(str, \"t4\") then \r\n          str = string.gsub(str, \"t4\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(electronics[4][iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end  \r\n\r\nelseif string.find(T, indy_type[9]) then\r\n   str = string.gsub(T, indy_type[9],\"\")\r\n   \r\n       if string.find(str, \"t1\") then \r\n          str = string.gsub(str, \"t1\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(recycler[1][iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end\r\n        if string.find(str, \"t2\") then \r\n          str = string.gsub(str, \"t2\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(recycler[2][iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end\r\n        if string.find(str, \"t3\") then \r\n          str = string.gsub(str, \"t3\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(recycler[3][iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end\r\n        if string.find(str, \"t4\") then \r\n          str = string.gsub(str, \"t4\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(recycler[4][iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end    \r\nend","filter":{"args":[{"variable":"*"}],"signature":"onInputText(text)","slotKey":"-4"},"key":"0"},{"code":"local columnPositions = {10, 266, 522, 778}\r\nlocal maxColumns = #columnPositions\r\nlocal MACHINE_TIER_COUNT = 4\r\nlocal ITEM_TIER_COUNT = 5\r\n\r\nlocal function newLayoutContext()\r\n    return { columnIndex = 1, y = 10 }\r\nend\r\n\r\nlocal headerHeight = 40\r\nlocal entrySpacing = 10\r\nlocal columnStartY = 20\r\n\r\nlocal function getBorderLimit()\r\n    if type(Border) == 'number' then\r\n        return Border\r\n    end\r\n\r\n    return 600\r\nend\r\n\r\nlocal function computeRemainingCapacityForContext(columnIndex, y)\r\n    local borderLimit = getBorderLimit()\r\n    local currentColumn = columnIndex or 1\r\n    local currentY = y or 0\r\n    local remaining = 0\r\n\r\n    while currentColumn <= maxColumns do\r\n        if currentY >= borderLimit then\r\n            currentColumn = currentColumn + 1\r\n            currentY = columnStartY\r\n        else\r\n            remaining = remaining + 1\r\n            currentY = currentY + entrySpacing\r\n        end\r\n    end\r\n\r\n    return remaining\r\nend\r\n\r\nlocal function deepCopy(value)\r\n    if type(value) ~= 'table' then\r\n        return value\r\n    end\r\n\r\n    local copy = {}\r\n    for key, item in pairs(value) do\r\n        if type(item) == 'table' then\r\n            copy[key] = deepCopy(item)\r\n        else\r\n            copy[key] = item\r\n        end\r\n    end\r\n\r\n    return copy\r\nend\r\n\r\nlocal function getRemainingCapacityForNewGroup(context)\r\n    return computeRemainingCapacityForContext(context.columnIndex, (context.y or 0) + headerHeight)\r\nend\r\n\r\nlocal screenCapacity\r\ndo\r\n    local layout = newLayoutContext()\r\n    screenCapacity = computeRemainingCapacityForContext(layout.columnIndex, layout.y + headerHeight)\r\nend\r\n\r\nlocal function getIndustryInfo(fid)\r\n    if not core_unit or not core_unit[1] then\r\n        return nil\r\n    end \r\n\r\n    local ok, info = pcall(function()\r\n        return core_unit[1].getElementIndustryInfoById(fid)\r\n    end)\r\n\r\n    if not ok or type(info) ~= 'table' then\r\n        return nil\r\n    end\r\n\r\n    return info\r\nend\r\n\r\nlocal function safeGetState(info)\r\n    if info and info[\"state\"] then\r\n        return info[\"state\"]\r\n    end\r\n\r\n    return nil\r\nend\r\n\r\nlocal function getCurrentProduct(info)\r\n    if not info then\r\n        return nil\r\n    end\r\n\r\n    local products = info[\"currentProducts\"]\r\n    if products and products[1] then\r\n        return products[1]\r\n    end\r\n\r\n    return nil\r\nend\r\n\r\nlocal function formatDisplayName(displayName)\r\n    if not displayName then\r\n        return nil\r\n    end\r\n\r\n    local tt = string.gsub(displayName, \"Craft \", \"\")\r\n    tt = string.gsub(tt, \"Advanced\",\"Adv.\")\r\n    tt = string.gsub(tt, \"hydraulics\",\"Hydraulics\")\r\n    tt = string.gsub(tt, \"^Uncommon\",\"Unc.\")\r\n    tt = string.gsub(tt, \" product\",\"\")\r\n    tt = string.gsub(tt, \" Product\",\"\")\r\n    tt = string.gsub(tt, \"Atmospheric\",\"Atmo\")\r\n    tt = string.gsub(tt, \" industry\",\" Ind.\")\r\n    tt = string.gsub(tt, \" Industry\",\" Ind.\")\r\n    tt = string.gsub(tt, \" xs$\",\" XS\")\r\n    tt = string.gsub(tt, \" s$\",\" S\")\r\n    tt = string.gsub(tt, \" m$\",\" M\")\r\n    tt = string.gsub(tt, \" l$\",\" L\")\r\n    tt = string.gsub(tt, \" xl$\",\" XL\")\r\n    tt = string.gsub(tt, \" xs \",\" XS \")\r\n    tt = string.gsub(tt, \" s \",\" S \")\r\n    tt = string.gsub(tt, \" m \",\" M \")\r\n    tt = string.gsub(tt, \" l \",\" L \")\r\n    tt = string.gsub(tt, \" xl \",\" XL \")\r\n    return tt\r\nend\r\n\r\nlocal function getFormattedProductName(info)\r\n    local product = getCurrentProduct(info)\r\n    if not product then\r\n        return nil\r\n    end\r\n\r\n    local itemInfo = system.getItem(product[\"id\"])\r\n    if not itemInfo then\r\n        return nil\r\n    end\r\n\r\n    return formatDisplayName(itemInfo[\"displayNameWithSize\"] or itemInfo[\"displayName\"])\r\nend\r\n\r\nf_state = function(fid, F)\r\n   local info = getIndustryInfo(fid)\r\n    if not info then\r\n        return \"Not available\"\r\n    end\r\n\r\n    state = safeGetState(info)\r\n    local function fmt(name, label)\r\n        if not Show_State then\r\n            return name\r\n        elseif State_As_Prefix then\r\n            return label .. \" - \" .. name\r\n        else\r\n            return name .. \" - \" .. label\r\n        end\r\n    end\r\n        if state == nil then\r\n        return \"Not available\"\r\n    end\r\n\r\n    if state < 1 and F == 0 then\r\n        local productName = getFormattedProductName(info)\r\n        if not productName then\r\n            return fmt(\"Unknown\", \"Error\" .. state)\r\n        end\r\n        return fmt(productName, \"Error\" .. state)\r\n    elseif state == 1 and F == 0 then\r\n        local industryInfo = info\r\n        if industryInfo == nil then\r\n            return \"Not configured\"\r\n        end\r\n        local currentProducts = industryInfo[\"currentProducts\"]\r\n        if currentProducts == nil or #currentProducts == 0 then\r\n            return \"Not configured\"\r\n        end\r\n        local productInfo = system.getItem(currentProducts[1][\"id\"])\r\n        if productInfo == nil then\r\n            return \"Not configured\"\r\n        end\r\n        local displayNameWithSize = productInfo[\"displayNameWithSize\"]\r\n                local tt = formatDisplayName(displayNameWithSize)\r\n        if not tt then\r\n            return \"Not configured\"\r\n        end\r\n        return fmt(tt, \"Stopped\")\r\n    elseif state == 2 and F == 0 then\r\n        local productName = getFormattedProductName(info)\r\n        if not productName then\r\n            return fmt(\"Unknown\", \"Running\")\r\n        end\r\n        return fmt(productName, \"Running\")\r\n    elseif state == 3 and F == 0 then\r\n        local productName = getFormattedProductName(info)\r\n        if not productName then\r\n            return fmt(\"Unknown\", \"Ingredients\")\r\n        end\r\n        return fmt(productName, \"Ingredients\")\r\n    elseif state == 4 and F == 0 then\r\n        local productName = getFormattedProductName(info)\r\n        if not productName then\r\n            return fmt(\"Unknown\", \"Output full\")\r\n        end\r\n        return fmt(productName, \"Output full\")\r\n    elseif state == 5 and F == 0 then\r\n        local productName = getFormattedProductName(info)\r\n        if not productName then\r\n            return fmt(\"Unknown\", \"No output container\")\r\n        end\r\n        return fmt(productName, \"No output container\")\r\n    elseif state == 6 and F == 0 then\r\n        local productName = getFormattedProductName(info)\r\n        if not productName then\r\n            return fmt(\"Unknown\", \"Pending\")\r\n        end\r\n        return fmt(productName, \"Pending\")\r\n    elseif state == 7 and F == 0 then\r\n        local productName = getFormattedProductName(info)\r\n        if not productName then\r\n            return fmt(\"Unknown\", \"Schematics\")\r\n        end\r\n        return fmt(productName, \"Schematics\")\r\n    elseif state > 7 and F == 0 then\r\n        local productName = getFormattedProductName(info)\r\n        if not productName then\r\n            return fmt(\"Unknown\", \"Error\" .. state)\r\n        end\r\n        return fmt(productName, \"Error\" .. state)\r\n    end\r\nend\r\n\r\nf_stateWithElementName = function(fid)\r\n    local info = getIndustryInfo(fid)\r\n    local rawElementName = core_unit[1].getElementNameById(fid)\r\n    if not info then\r\n        return formatDisplayName(rawElementName) or rawElementName\r\n    end\r\n\r\n    state = safeGetState(info)\r\n    elementName = formatDisplayName(rawElementName) or rawElementName\r\n    local label = \"\"\r\n    if state == nil then\r\n        label = \"Unknown\"\r\n    elseif state == 1 then\r\n        if isElementConfigured(fid) then\r\n            label = \"Stopped\"\r\n        else\r\n            label = \"Unconfig\"\r\n        end\r\n    elseif state == 2 then\r\n        label = \"Running\"\r\n    elseif state == 3 then\r\n        label = \"Ingredients\"\r\n    elseif state == 4 then\r\n        label = \"Output full\"\r\n    elseif state == 5 then\r\n        label = \"No output\"\r\n    elseif state == 6 then\r\n        label = \"Pending\"\r\n    elseif state == 7 then\r\n        label = \"Schematic\"\r\n    elseif state > 7 then\r\n        label = \"ERROR\"\r\n    end\r\n    if not Show_State then\r\n        return elementName\r\n    elseif State_As_Prefix then\r\n        return label .. \" - \" .. elementName\r\n    else\r\n        return elementName .. \" - \" .. label\r\n    end\r\nend\r\n\r\nisElementConfigured = function(fid)\r\n        local industryInfo = getIndustryInfo(fid)\r\n                if industryInfo == nil then\r\n                        return false\r\n                end\r\n        local currentProducts = industryInfo[\"currentProducts\"]\r\n                if currentProducts == nil or #currentProducts == 0 then\r\n                        return false\r\n                end\r\n        local productInfo = system.getItem(currentProducts[1][\"id\"])\r\n                if productInfo == nil then\r\n                        return false\r\n                end\r\n\r\n        return true\r\nend\r\n\r\ngetStateLabel = function(fid)\r\n    local info = getIndustryInfo(fid)\r\n    if not info then\r\n        return \"Unknown\"\r\n    end\r\n\r\n    local state = safeGetState(info)\r\n    if state == nil then\r\n        return \"Unknown\"\r\n    end\r\n    if state == 1 then\r\n        if isElementConfigured(fid) then\r\n            return \"Stopped\"\r\n        else\r\n            return \"Unconfig\"\r\n        end\r\n    elseif state == 2 then\r\n        return \"Running\"\r\n    elseif state == 3 then\r\n        return \"Ingredients\"\r\n    elseif state == 4 then\r\n        return \"Output full\"\r\n    elseif state == 5 then\r\n        return \"No output\"\r\n    elseif state == 6 then\r\n        return \"Pending\"\r\n    elseif state == 7 then\r\n        return \"Schematic\"\r\n    else\r\n        return \"Error\" .. state\r\n    end\r\nend\r\n\r\nsetNextFillColourByState = function(fid)\r\n    local info = getIndustryInfo(fid)\r\n    local state = safeGetState(info)\r\n    if state == nil then return \"\" end\r\n    if state == 1 then return \"setNextFillColor(layer,1,1,0,\".. Brightness ..\")\"\r\n        elseif state == 2 then return \"setNextFillColor(layer,0,1,0,\".. Brightness ..\")\"\r\n        elseif state == 3 then return \"setNextFillColor(layer,1,0,0.8,\".. Brightness ..\")\"\r\n        elseif state == 4 then return \"setNextFillColor(layer,1,0.5,0,\".. Brightness ..\")\"\r\n        elseif state == 5 then return \"setNextFillColor(layer,1,0,0,\".. Brightness ..\")\"\r\n        elseif state == 6 then return \"setNextFillColor(layer,0,0.5,1,\".. Brightness ..\")\"\r\n        elseif state == 7 then return \"setNextFillColor(layer,1,0,0,\".. Brightness ..\")\"\r\n        else return \"\"\r\n    end\r\nend\r\n\r\ngetItemTier = function(fid)\r\n    local info = getIndustryInfo(fid)\r\n    if not info then\r\n        return 0\r\n    end\r\n\r\n    local products = info[\"currentProducts\"]\r\n    if products and #products >= 1 then\r\n        local item = system.getItem(products[1][\"id\"])\r\n        if item then return item[\"tier\"] end\r\n    end\r\n    return 0\r\nend\r\n\r\ngetMachineTier = function(fid)\r\n    if machineTierById then\r\n        return machineTierById[fid] or 0\r\n    end\r\n    return 0\r\nend\r\n\r\nt_stats = function(fid, ax, ay)\r\n    local info = getIndustryInfo(fid)\r\n    if not info then\r\n        return \"\"\r\n    end\r\n    local currentProducts = info[\"currentProducts\"]\r\n    local maintain, batch\r\n    if currentProducts == nil or currentProducts[1] == nil then\r\n        maintain = \"-----\"\r\n        batch    = \"-----\"\r\n    else\r\n        maintain = string.format(\"%d\", info[\"maintainProductAmount\"])\r\n        batch    = string.format(\"%d\", currentProducts[1][\"quantity\"])\r\n    end\r\n        return string.format(\r\n        \"setNextFillColor(layer, .6,.6,.6,%s)\\nsetNextTextAlign(layer, AlignH_Right, AlignV_Middle)\\naddText(layer, font3, \\\"M:%s B:%s\\\", %d, %d)\\n\",\r\n        Brightness,\r\n        maintain,\r\n        batch,\r\n        ax,\r\n        ay\r\n    )\r\nend\r\n\r\nlocal function formatIndex(value)\r\n    if value < 10 then\r\n        return string.format(\"00%d\", value)\r\n    elseif value < 100 then\r\n        return string.format(\"0%d\", value)\r\n    else\r\n        return tostring(value)\r\n    end\r\nend\r\n\r\nindy_column = function(context, indy, tier, startIndex)\r\n    startIndex = startIndex or 1\r\n\r\n    local entries = {}\r\n    if Show_Indy_Name then\r\n        for _, id in ipairs(indy) do\r\n            local itemTier = getItemTier(id)\r\n            local machineTier = getMachineTier(id)\r\n            if (not Sort_By_Item_Tier) or itemTier == tier or (itemTier == 0 and machineTier == tier) then\r\n                local info = getIndustryInfo(id)\r\n                if info then\r\n                    local rawName = core_unit[1].getElementNameById(id)\r\n                    table.insert(entries, {\r\n                        mid = id,\r\n                        name = formatDisplayName(rawName) or rawName,\r\n                        state = safeGetState(info) or -1,\r\n                        stateLabel = getStateLabel(id)\r\n                    })\r\n                end\r\n            end\r\n        end\r\n        table.sort(entries, function(a, b)\r\n            if Sort_By_State then\r\n                if State_Sort_Mode == 'A' and a.stateLabel ~= b.stateLabel then\r\n                    return a.stateLabel < b.stateLabel\r\n                elseif State_Sort_Mode == 'V' and a.state ~= b.state then\r\n                    return a.state < b.state\r\n                end\r\n            end\r\n            return a.name < b.name\r\n        end)\r\n    else\r\n        for _, id in ipairs(indy) do\r\n            local industryData = getIndustryInfo(id)\r\n            if not industryData then\r\n                goto continue\r\n            end\r\n            local currentProducts = industryData[\"currentProducts\"]\r\n            local itemTier = 0\r\n            local displayName\r\n            if currentProducts and #currentProducts >= 1 then\r\n                local itemInfo = system.getItem(currentProducts[1][\"id\"])\r\n                if itemInfo then\r\n                    itemTier = itemInfo[\"tier\"] or 0\r\n                    displayName = getName(itemInfo[\"displayNameWithSize\"])\r\n                end\r\n            end\r\n\r\n            local machineTier = getMachineTier(id)\r\n            if (not Sort_By_Item_Tier) or itemTier == tier or (itemTier == 0 and machineTier == tier) then\r\n                if not displayName then\r\n                    displayName = getName(core_unit[1].getElementNameById(id))\r\n                end\r\n                table.insert(entries, {\r\n                    mid = id,\r\n                    name = string.lower(displayName),\r\n                    state = safeGetState(industryData) or -1,\r\n                    stateLabel = getStateLabel(id)\r\n                })\r\n            end\r\n            ::continue::\r\n        end\r\n        table.sort(entries, function(a, b)\r\n            if Sort_By_State then\r\n                if State_Sort_Mode == 'A' and a.stateLabel ~= b.stateLabel then\r\n                    return a.stateLabel < b.stateLabel\r\n                elseif State_Sort_Mode == 'V' and a.state ~= b.state then\r\n                    return a.state < b.state\r\n                end\r\n            end\r\n            return a.name < b.name\r\n        end)\r\n    end\r\n\r\n    local totalEntries = #entries\r\n    if totalEntries == 0 or startIndex > totalEntries then\r\n        return \"\", nil, totalEntries\r\n    end\r\n\r\n    local fillColorScript = \"\"\r\n    if tier <= 1 then\r\n        fillColorScript = \"setDefaultFillColor(layer, Shape_Text, \" .. Tier_1_Colour .. \", \" .. Brightness .. \")\\n\"\r\n    elseif tier == 2 then\r\n        fillColorScript = \"setDefaultFillColor(layer, Shape_Text, \" .. Tier_2_Colour .. \", \" .. Brightness .. \")\\n\"\r\n    elseif tier == 3 then\r\n        fillColorScript = \"setDefaultFillColor(layer, Shape_Text, \" .. Tier_3_Colour .. \", \" .. Brightness .. \")\\n\"\r\n    elseif tier == 4 then\r\n        fillColorScript = \"setDefaultFillColor(layer, Shape_Text, \" .. Tier_4_Colour .. \", \" .. Brightness .. \")\\n\"\r\n    elseif tier >= 5 then\r\n        fillColorScript = \"setDefaultFillColor(layer, Shape_Text, \" .. Tier_5_Colour .. \", \" .. Brightness .. \")\\n\"\r\n    end\r\n\r\n    local parts = {}\r\n    if fillColorScript ~= \"\" then\r\n        table.insert(parts, fillColorScript)\r\n    end\r\n\r\n    local columnIndex = context.columnIndex\r\n    local y = context.y\r\n    local i = startIndex\r\n\r\n    while i <= totalEntries do\r\n        if columnIndex > maxColumns then\r\n            context.columnIndex = columnIndex\r\n            context.y = y\r\n            return table.concat(parts), i, totalEntries\r\n        end\r\n\r\n        if y >= Border then\r\n            y = 20\r\n            columnIndex = columnIndex + 1\r\n            if columnIndex > maxColumns then\r\n                context.columnIndex = columnIndex\r\n                context.y = y\r\n                return table.concat(parts), i, totalEntries\r\n            end\r\n        end\r\n\r\n        local entry = entries[i]\r\n        local x = columnPositions[columnIndex]\r\n        local num = formatIndex(i)\r\n\r\n        table.insert(parts, string.format(\"addText(layer, font3, \\\"%s\\\", %d, %d)\\n\", num, x, y))\r\n        table.insert(parts, setNextFillColourByState(entry.mid))\r\n        if Show_Indy_Name then\r\n            table.insert(parts, string.format(\"addText(layer, font3, \\\"%s\\\", %d, %d)\\n\", f_stateWithElementName(entry.mid), x + 20, y))\r\n        else\r\n            table.insert(parts, string.format(\"addText(layer, font3, \\\"%s\\\", %d, %d)\\n\", f_state(entry.mid, 0), x + 20, y))\r\n        end\r\n        if Show_Maintain_Batch then\r\n            table.insert(parts, t_stats(entry.mid, x + 240, y))\r\n        end\r\n\r\n        y = y + 10\r\n        i = i + 1\r\n    end\r\n\r\n    context.columnIndex = columnIndex\r\n    context.y = y\r\n\r\n    return table.concat(parts), nil, totalEntries\r\nend\r\n\r\nlocal function mergeTables(...)\r\n    local result = {}\r\n    for _,t in ipairs({...}) do\r\n        for _,v in ipairs(t) do table.insert(result, v) end\r\n    end\r\n    return result\r\nend\r\n\r\nlocal electronicsAllList, printerAllList, chemicalAllList, glassAllList\r\nlocal refinerAllList, smelterAllList, honeyAllList, recyclerAllList\r\nlocal assemblyAllList, metalworkAllList\r\n\r\nif Sort_By_Item_Tier then\r\n    electronicsAllList = mergeTables(electronics1, electronics2, electronics3, electronics4)\r\n    printerAllList = mergeTables(printer1, printer2, printer3, printer4)\r\n    chemicalAllList = mergeTables(chemical1, chemical2, chemical3, chemical4)\r\n    glassAllList = mergeTables(glass1, glass2, glass3, glass4)\r\n    refinerAllList = mergeTables(refiner1, refiner2, refiner3, refiner4)\r\n    smelterAllList = mergeTables(smelter1, smelter2, smelter3, smelter4)\r\n    honeyAllList = mergeTables(honey1, honey2, honey3, honey4)\r\n    recyclerAllList = mergeTables(recycler1, recycler2, recycler3, recycler4)\r\n    assemblyAllList = mergeTables(assembly1, assembly2, assembly3, assembly4)\r\n    metalworkAllList = mergeTables(metalwork1, metalwork2, metalwork3, metalwork4)\r\nend\r\n\r\nlocal brightness = options.Brightness or 1\r\nlocal background = options.Background or ''\r\nlocal backgroundScript = \"setNextFillColor(layer,0,0,0,0)\\nsetNextStrokeWidth(layer, 1)\\naddBoxRounded(layer, 0, 0, rx, ry, 10)\\n\"\r\nif background ~= '' then\r\n    if string.match(string.lower(background), \"^%a+://\") then\r\n        backgroundScript = \"local bg = loadImage(\\\"\" .. background .. \"\\\")\\naddImage(layer,bg,0,0,rx,ry)\\nsetNextFillColor(layer,0,0,0,0)\\nsetNextStrokeWidth(layer,1)\\naddBoxRounded(layer,0,0,rx,ry,10)\\n\"\r\n    else\r\n        local r, g, b = background:match(\"([%d%.]+)%s*,%s*([%d%.]+)%s*,%s*([%d%.]+)\")\r\n        if r and g and b then\r\n            backgroundScript = \"setNextFillColor(layer,\" .. r .. \",\" .. g .. \",\" .. b .. \",\" .. Brightness .. \")\\nsetNextStrokeWidth(layer,1)\\naddBoxRounded(layer,0,0,rx,ry,10)\\n\"\r\n        end\r\n    end\r\nend\r\n\r\nlocal groupDefinitions\r\n\r\nlocal groupKeyAliases = {\r\n    electronics = 'electronics',\r\n    electronic = 'electronics',\r\n    chemical = 'chemical',\r\n    chemicals = 'chemical',\r\n    glass = 'glass',\r\n    glasses = 'glass',\r\n    printers = 'printers',\r\n    printer = 'printers',\r\n    ['3dprinters'] = 'printers',\r\n    ['3dprinter'] = 'printers',\r\n    refiners = 'refiners',\r\n    refiner = 'refiners',\r\n    refineries = 'refiners',\r\n    refinery = 'refiners',\r\n    smelters = 'smelters',\r\n    smelter = 'smelters',\r\n    honeycomb = 'honeycomb',\r\n    honeycombs = 'honeycomb',\r\n    honey = 'honeycomb',\r\n    recyclers = 'recyclers',\r\n    recycler = 'recyclers',\r\n    recycling = 'recyclers',\r\n    assembly = 'assembly',\r\n    assemblies = 'assembly',\r\n    assembler = 'assembly',\r\n    assemblers = 'assembly',\r\n    ['assemblyline'] = 'assembly',\r\n    ['assemblylines'] = 'assembly',\r\n    metalwork = 'metalwork',\r\n    metalworks = 'metalwork'\r\n}\r\n\r\nlocal defaultGroupOrder = {\r\n    'electronics',\r\n    'chemical',\r\n    'glass',\r\n    'printers',\r\n    'refiners',\r\n    'smelters',\r\n    'honeycomb',\r\n    'recyclers',\r\n    'assembly',\r\n    'metalwork'\r\n}\r\n\r\nlocal cachedGroupOrderString\r\nlocal cachedGroupOrderResult\r\nlocal cachedGroupOrderInvalidTokens\r\n\r\nlocal function normalizeGroupOrderKey(key)\r\n    if type(key) ~= 'string' then\r\n        return nil\r\n    end\r\n\r\n    local normalized = key:lower()\r\n    normalized = normalized:gsub('%s+', '')\r\n    normalized = normalized:gsub('[^%w]', '')\r\n    if normalized == '' then\r\n        return nil\r\n    end\r\n\r\n    return normalized\r\nend\r\n\r\nlocal function resolveGroupKey(key)\r\n    local normalized = normalizeGroupOrderKey(key)\r\n    if not normalized then\r\n        return nil\r\n    end\r\n\r\n    local resolved = groupKeyAliases[normalized] or normalized\r\n    if groupDefinitions and groupDefinitions[resolved] then\r\n        return resolved\r\n    end\r\n\r\n    return nil\r\nend\r\n\r\nlocal function computeGroupOrder(orderString)\r\n    if type(orderString) ~= 'string' then\r\n        orderString = ''\r\n    end\r\n\r\n    if cachedGroupOrderString == orderString and cachedGroupOrderResult then\r\n        return cachedGroupOrderResult\r\n    end\r\n\r\n    local seen = {}\r\n    local parsed = {}\r\n    local invalidTokens = {}\r\n\r\n    for entry in orderString:gmatch('[^,]+') do\r\n        local trimmed = entry:match('^%s*(.-)%s*$')\r\n        if trimmed ~= '' then\r\n            local resolved = resolveGroupKey(trimmed)\r\n            if resolved then\r\n                if not seen[resolved] then\r\n                    table.insert(parsed, resolved)\r\n                    seen[resolved] = true\r\n                end\r\n            else\r\n                table.insert(invalidTokens, trimmed)\r\n            end\r\n        end\r\n    end\r\n\r\n    for _, key in ipairs(defaultGroupOrder) do\r\n        if not seen[key] then\r\n            table.insert(parsed, key)\r\n            seen[key] = true\r\n        end\r\n    end\r\n\r\n    cachedGroupOrderString = orderString\r\n    cachedGroupOrderResult = parsed\r\n    cachedGroupOrderInvalidTokens = table.concat(invalidTokens, ', ')\r\n\r\n    if #invalidTokens > 0 then\r\n        system.print(\"Unknown group(s) in Group_Order: \" .. cachedGroupOrderInvalidTokens)\r\n    end\r\n\r\n    return parsed\r\nend\r\n\r\nlocal function getGroupsInConfiguredOrder()\r\n    local keys = computeGroupOrder(options.Group_Order or '')\r\n    local ordered = {}\r\n    for _, key in ipairs(keys) do\r\n        local group = groupDefinitions and groupDefinitions[key]\r\n        if group then\r\n            table.insert(ordered, group)\r\n        end\r\n    end\r\n    return ordered\r\nend\r\n\r\nlocal function getGroupSources(group)\r\n    if Sort_By_Item_Tier then\r\n        local list = group.allList or {}\r\n        local sources = {}\r\n        for tier = 1, ITEM_TIER_COUNT do\r\n            table.insert(sources, { list = list, tier = tier })\r\n        end\r\n        return sources\r\n    else\r\n        local sources = {}\r\n        for tier = 1, MACHINE_TIER_COUNT do\r\n            table.insert(sources, { list = group.tiers[tier] or {}, tier = tier })\r\n        end\r\n        return sources\r\n    end\r\nend\r\n\r\nlocal function renderGroupSegment(context, group, state)\r\n    local sources = getGroupSources(group)\r\n    state.tierStarts = state.tierStarts or {}\r\n    for index = 1, #sources do\r\n        state.tierStarts[index] = state.tierStarts[index] or 1\r\n    end\r\n\r\n    local headerLabel = group.name\r\n    if state.continued then\r\n        headerLabel = headerLabel .. ' (cont.)'\r\n    end\r\n\r\n    local columnIndex = context.columnIndex\r\n    local headerX = columnPositions[columnIndex]\r\n    if not headerX then\r\n        return '', state, false\r\n    end\r\n\r\n    local parts = { string.format(\"header(%q, %d, %d, %d)\\n\", headerLabel, context.y, headerX, group.count or 0) }\r\n    context.y = context.y + 40\r\n\r\n    for idx, source in ipairs(sources) do\r\n        local script, nextIndex, totalEntries = indy_column(context, source.list, source.tier, state.tierStarts[idx])\r\n        if script ~= '' then\r\n            table.insert(parts, script)\r\n        end\r\n        if nextIndex then\r\n            state.tierStarts[idx] = nextIndex\r\n            state.continued = true\r\n            return table.concat(parts), state, false\r\n        else\r\n            state.tierStarts[idx] = (totalEntries or 0) + 1\r\n        end\r\n    end\r\n\r\n    state.tierStarts = nil\r\n    state.continued = false\r\n    return table.concat(parts), state, true  \r\nend\r\n\r\nlocal function buildScreenScript(content)\r\n    local headerFillAlpha = 0.2 * Brightness\r\n    local scriptParts = {\r\n        \"local layer = createLayer()\\n\",\r\n        \"local rx, ry = getResolution()\\n\\n\",\r\n        string.format(\"local font = loadFont(\\\"Oxanium\\\",%d)\\n\", Font_Size),\r\n        string.format(\"local font3 = loadFont(\\\"RobotoCondensed\\\", %d)\\n\\n\", Font_Size - 2),\r\n        string.format(\"setDefaultFillColor(layer, Shape_Text, 0,0,1,%s)\\n\", Brightness),\r\n        string.format(\"setDefaultStrokeColor(layer, Shape_Line, 0,.3,2,%s)\\n\", Brightness),\r\n        string.format(\"setDefaultStrokeColor(layer, Shape_BoxRounded, 0,.3,2,%s)\\n\\n\", Brightness),\r\n        backgroundScript,\r\n        \"local div = rx/4\\n\\n\",\r\n        \"local header = function(tag, y, p, n)\\n\",\r\n        string.format(\"    setNextFillColor(layer, 0,0,1,%s)\\n\", headerFillAlpha),\r\n        \"    setNextStrokeWidth(layer, .1)\\n\",\r\n        \"    addBoxRounded(layer, p, y, div - 20, 20, 4)\\n\",\r\n        \"    setNextTextAlign(layer, AlignH_Center, AlignV_Middle)\\n\",\r\n        string.format(\"    setNextFillColor(layer, 1,1,1,%s)\\n\", Brightness),\r\n        \"    addText(layer, font, '(' .. n .. ') ' .. tag, div/2 + (p) - 10, y + 11)\\n\",\r\n        \"end\\n\\n\",\r\n        \"for x = 1,5 do addLine(layer, div * x, 0, div * x, ry) end\\n\\n\",\r\n        content\r\n    }\r\n\r\n    return table.concat(scriptParts)\r\nend\r\n\r\nlocal SCREEN_SCRIPT_LIMIT = 50000\r\nlocal DEBUG_SCREEN_SCRIPT_LIMIT = false\r\n\r\nlocal baseScriptLength\r\nlocal emptyScreenScript\r\ndo\r\n    emptyScreenScript = buildScreenScript('')\r\n    baseScriptLength = #emptyScreenScript\r\nend\r\n\r\ngroupDefinitions = {\r\n    electronics = { key = 'electronics', name = 'Electronics Industry', count = electronics_all, tiers = { electronics1, electronics2, electronics3, electronics4 }, allList = electronicsAllList },\r\n    chemical = { key = 'chemical', name = 'Chemical Industry', count = chemical_all, tiers = { chemical1, chemical2, chemical3, chemical4 }, allList = chemicalAllList },\r\n    glass = { key = 'glass', name = 'Glass Industry', count = glass_all, tiers = { glass1, glass2, glass3, glass4 }, allList = glassAllList },\r\n    printers = { key = 'printers', name = '3D Printers', count = printer_all, tiers = { printer1, printer2, printer3, printer4 }, allList = printerAllList },\r\n    refiners = { key = 'refiners', name = 'Refiners', count = refiner_all, tiers = { refiner1, refiner2, refiner3, refiner4 }, allList = refinerAllList },\r\n    smelters = { key = 'smelters', name = 'Smelters', count = smelter_all, tiers = { smelter1, smelter2, smelter3, smelter4 }, allList = smelterAllList },\r\n    honeycomb = { key = 'honeycomb', name = 'Honeycomb', count = honey_all, tiers = { honey1, honey2, honey3, honey4 }, allList = honeyAllList },\r\n    recyclers = { key = 'recyclers', name = 'Recyclers', count = recycler_all, tiers = { recycler1, recycler2, recycler3, recycler4 }, allList = recyclerAllList },\r\n    assembly = { key = 'assembly', name = 'Assembly Lines', count = assembly_all, tiers = { assembly1, assembly2, assembly3, assembly4 }, allList = assemblyAllList },\r\n    metalwork = { key = 'metalwork', name = 'Metalwork Industry', count = metalwork_all, tiers = { metalwork1, metalwork2, metalwork3, metalwork4 }, allList = metalworkAllList }\r\n}\r\n\r\nlocal groups = getGroupsInConfiguredOrder()\r\n\r\nlocal screensContent = {}\r\nlocal context = newLayoutContext()\r\nlocal currentParts = {}\r\nlocal currentLength = 0\r\n\r\nlocal function finalizeScreen()\r\n    if #currentParts == 0 then\r\n        context = newLayoutContext()\r\n        currentLength = 0\r\n        return\r\n    end\r\n\r\n    table.insert(screensContent, buildScreenScript(table.concat(currentParts)))\r\n    currentParts = {}\r\n    context = newLayoutContext()\r\n    currentLength = 0\r\nend\r\n\r\nfor _, group in ipairs(groups) do\r\n    local state = {}\r\n    while true do\r\n        if context.columnIndex > maxColumns then\r\n            finalizeScreen()\r\n        end\r\n\r\n        if context.columnIndex > maxColumns then\r\n            break\r\n        end\r\n\r\n        local shouldFinalizeBeforeRender = false\r\n        if not state.tierStarts and #currentParts > 0 then\r\n            local groupCount = tonumber(group.count) or 0\r\n            if groupCount > 0 then\r\n                local remainingCapacity = getRemainingCapacityForNewGroup(context)\r\n                if remainingCapacity <= 0 or (groupCount <= screenCapacity and groupCount > remainingCapacity) then\r\n                    shouldFinalizeBeforeRender = true\r\n                end\r\n            end\r\n        end\r\n\r\n        if shouldFinalizeBeforeRender then\r\n            finalizeScreen()\r\n        else\r\n            local skipRender = false\r\n\r\n            while true do\r\n                local headerBottom = (context.y or 0) + headerHeight\r\n                local borderLimit = getBorderLimit()\r\n\r\n                if headerBottom < borderLimit then\r\n                    break\r\n                end\r\n\r\n                if context.columnIndex < maxColumns then\r\n                    context.columnIndex = context.columnIndex + 1\r\n                    context.y = newLayoutContext().y\r\n                else\r\n                    finalizeScreen()\r\n                    skipRender = true\r\n                    break\r\n                end\r\n            end\r\n\r\n            if not skipRender then\r\n                local previousState = deepCopy(state)\r\n                local content, updatedState, finished = renderGroupSegment(context, group, state)\r\n                state = updatedState or state\r\n\r\n                local shouldRetrySegment = false\r\n\r\n                if content ~= '' then\r\n                    local contentLength = #content\r\n                    local upcomingLength = currentLength + contentLength + baseScriptLength\r\n\r\n                    if upcomingLength > SCREEN_SCRIPT_LIMIT then\r\n                        if DEBUG_SCREEN_SCRIPT_LIMIT then\r\n                            system.print(string.format('Debug: screen script length would reach %d (limit %d) while rendering %s; finalizing current screen', upcomingLength, SCREEN_SCRIPT_LIMIT, group.name))\r\n                        end\r\n                        finalizeScreen()\r\n                        state = previousState\r\n                        shouldRetrySegment = true\r\n                    else\r\n                        table.insert(currentParts, content)\r\n                        currentLength = currentLength + contentLength\r\n                    end\r\n                end\r\n\r\n                if not shouldRetrySegment then\r\n                    if finished then\r\n                        break\r\n                    else\r\n                        finalizeScreen()\r\n                    end\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nif #currentParts > 0 then\r\n    finalizeScreen()\r\nend\r\n\r\nif #screensContent == 0 then\r\n    table.insert(screensContent, emptyScreenScript)\r\nend\r\n\r\nfor index, screen in ipairs(screens) do\r\n    screen.activate()\r\n    local script = screensContent[index] or emptyScreenScript\r\n    screen.setRenderScript(script)\r\nend\r\n\r\nif #screensContent > #screens then\r\n    system.print(string.format('Warning: %d screens required but only %d connected', #screensContent, #screens))\r\nend","filter":{"args":[{"value":"refresh"}],"signature":"onTimer(timerid)","slotKey":"-1"},"key":"0"},{"code":"if options and options.Turn_Screens_Off_on_Exit and screens then\r\n    for _, screen in ipairs(screens) do\r\n        if screen then\r\n            if screen.clearScriptOutput then\r\n                screen.clearScriptOutput() \r\n            end\r\n            if screen.deactivate then\r\n            screen.deactivate()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nif databank ~= nil then\r\n    databank.setStringValue(\"options\", json.encode(options))\r\n    system.print(\"LUA Parameters saved to Databank\")\r\nend","filter":{"args":[],"signature":"onStop()","slotKey":"-1"},"key":"0"},{"code":"-- Script created by Bartas (ingame), BartasRS#2742 (Discord)\r\n-- Updates provided by Vtreka (ingame), Vtreka#1337 (Discord)\r\n-- Contributions provided by BlimpieBoy (ingame), Blimpieboy#0903 (Discord)\r\n\r\nsystem.print(\" --- Factory Monitor Expanded v3.3 ---\")\r\nsystem.print (\"type 'help' for available commands\")\r\n\r\n--[[ LUA PARAMETERS ]]\r\nUse_Databank_Values = false --export: If checked and if values were saved in databank, parmaters will be loaded from the databank, if not, following ones will be used\r\nTurn_Screens_Off_on_Exit = false --export: Turn off all connected screens when the board stops\r\nShow_Indy_Name = false --export: Shows Industry Unit name instead of element being crafted if checked\r\nShow_Maintain_Batch = true --export: Display maintain and batch values for each machine\r\nShow_State = true --export: Show machine state if checked\r\nSort_By_Item_Tier = true --export: Sort by item tier instead of Industry Unit tier\r\nSort_By_State = false --export: Sort machines by state\r\nState_As_Prefix = false --export: Put state before the machine/item name if checked\r\nState_Sort_Mode = 'V' --export: When sorting by state, 'A' sorts alphabetically and 'V' by default value\r\nBorder = 600 --export: Bottom display line<br>Maximum 600<br>Use to adjust\r\nRefresh_Timer = 5 --export: Screen(s) refresh timer in seconds\r\nBrightness = 1 --export: Adjust text and background transparency (0 to 1)\r\nFont_Size = 12 -- Base font size for text\r\nBackground = '0, 0, 0' --export: Set background colour \"r, g, b\" or image URL (make sure to include the http:// or https://)\r\nTier_1_Colour = '0.8, 0.8, 0.8' --export: Set Tier 1 Colour\r\nTier_2_Colour = '0, 1.5, 0' --export: Set Tier 2 Colour\r\nTier_3_Colour = '0, 0.15, 1' --export: Set Tier 3 Colour\r\nTier_4_Colour = '1, 0, 1.5' --export: Set Tier 4 Colour\r\nTier_5_Colour = '2, 0.8, 0' --export: Set Tier 5 Colour\r\nGroup_Order = 'assembly, electronics, chemical, glass, printers, refiners, smelters, honeycomb, recyclers, metalwork' --export: Comma separated industry group keys (electronics, chemical, glass, printers, refiners, smelters, honeycomb, recyclers, assembly, metalwork)\r\n\r\nsystem.print(\"Refresh timer set to: \"..Refresh_Timer..\" seconds\")\r\n\r\noptions = {}\r\noptions.Show_Indy_Name = Show_Indy_Name\r\noptions.Border = Border\r\noptions.Tier_1_Colour = Tier_1_Colour\r\noptions.Tier_2_Colour = Tier_2_Colour\r\noptions.Tier_3_Colour = Tier_3_Colour\r\noptions.Tier_4_Colour = Tier_4_Colour\r\noptions.Tier_5_Colour = Tier_5_Colour\r\noptions.Brightness = Brightness\r\noptions.Background = Background\r\n-- options.Font_Size = Font_Size\r\noptions.Sort_By_Item_Tier = Sort_By_Item_Tier\r\noptions.Sort_By_State = Sort_By_State\r\noptions.State_As_Prefix = State_As_Prefix\r\noptions.State_Sort_Mode = State_Sort_Mode\r\noptions.Show_Maintain_Batch = Show_Maintain_Batch\r\noptions.Show_State = Show_State\r\noptions.Turn_Screens_Off_on_Exit = Turn_Screens_Off_on_Exit\r\noptions.Group_Order = Group_Order\r\n\r\ndatabank = nil\r\nscreens = {}\r\ncore_unit = {}\r\n\r\nfor slot_name, slot in pairs(unit) do\r\n    if type(slot) == \"table\"\r\n        and type(slot.export) == \"table\"\r\n        and slot.getClass\r\n    then\r\n        slot.slotname = slot_name\r\n        if slot.getClass():lower():find('screenunit') then \r\n            table.insert(screens,slot)\r\n            slot.activate()\r\n        elseif slot.getClass():lower():find('coreunit') then table.insert(core_unit,slot)\r\n        elseif slot.getClass():lower() == 'databankunit' then\r\n            databank = slot\r\n        end\r\n    end\r\nend\r\n\r\nif #screens == 0 then\r\n    system.print(\"No screen detected\")\r\nelse\r\n    table.sort(screens, function(a,b) return a.slotname < b.slotname end)\r\n    local plural = \"\"\r\n    if #screens > 1 then plural = \"s\" end\r\n    system.print(#screens .. \" screen\" .. plural .. \" connected\")\r\nend\r\n\r\nif #core_unit == 0 then\r\n    system.print(\"No core detected\") else system.print(\"Core connected\")\r\nend\r\n\r\nif databank == nil then\r\n    system.print(\"No Databank Detected\")\r\nelse\r\n    system.print(\"Databank Connected\")\r\n    if (databank.hasKey(\"options\")) and (Use_Databank_Values == true) then\r\n        local db_options = json.decode(databank.getStringValue(\"options\"))\r\n        if db_options then\r\n            for key, value in pairs(options) do\r\n                if db_options[key] then options[key] = db_options[key] end\r\n            end\r\n            system.print(\"Options Loaded From Databank\")\r\n        else\r\n            system.print(\"No parameters saved to Databank. Restart the Programming Board\")\r\n        end\r\n    else\r\n        system.print(\"Options Loaded From LUA Parameters\")\r\n    end\r\nend\r\n\r\nelementIdList = core_unit[1].getElementIdList()\r\n\r\nmachineTierById = {}\r\n\r\nlocal function registerMachine(list, counts, tierIndex, id)\r\n    table.insert(list, id)\r\n    counts[tierIndex] = counts[tierIndex] + 1\r\n    machineTierById[id] = tierIndex\r\nend\r\n\r\nmetalwork1 = {}\r\nmetalwork2 = {}\r\nmetalwork3 = {}\r\nmetalwork4 = {}\r\n\r\nelectronics1 = {}\r\nelectronics2 = {}\r\nelectronics3 = {}\r\nelectronics4 = {}\r\n\r\nglass1 = {}\r\nglass2 = {}\r\nglass3 = {}\r\nglass4 = {}\r\n\r\nprinter1 = {}\r\nprinter2 = {}\r\nprinter3 = {}\r\nprinter4 = {}\r\n\r\nchemical1 = {}\r\nchemical2 = {}\r\nchemical3 = {}\r\nchemical4 = {}\r\n\r\nrefiner1 = {}\r\nrefiner2 = {}\r\nrefiner3 = {}\r\nrefiner4 = {}\r\n\r\nsmelter1 = {}\r\nsmelter2 = {}\r\nsmelter3 = {}\r\nsmelter4 = {}\r\n\r\nhoney1 = {}\r\nhoney2 = {}\r\nhoney3 = {}\r\nhoney4 = {}\r\n\r\nrecycler1 = {}\r\nrecycler2 = {}\r\nrecycler3 = {}\r\nrecycler4 = {}\r\n\r\n-- Assembly Lines --\r\nassembly1 = {}\r\nassembly2 = {}\r\nassembly3 = {}\r\nassembly4 = {}\r\n\r\nmetalwork_count = {0,0,0,0}\r\nelectronics_count = {0,0,0,0}\r\nglass_count = {0,0,0,0}\r\nprinter_count = {0,0,0,0}\r\nchemical_count = {0,0,0,0}\r\nrefiner_count = {0,0,0,0}\r\nsmelter_count = {0,0,0,0}\r\nassembly_count = {0,0,0,0}\r\nhoney_count = {0,0,0,0}\r\nrecycler_count = {0,0,0,0}\r\n\r\n---- substitution list, credits to Squizz Cephinator\r\nlocal ntxt = \"\"\r\nfunction getName(ntxt)\r\n\r\n        ntxt = ntxt:gsub(\" xs$\", \" XS\")\r\n        ntxt = ntxt:gsub(\" s$\", \" S\")\r\n        ntxt = ntxt:gsub(\" m$\", \" M\")\r\n        ntxt = ntxt:gsub(\" l$\", \" L\")\r\n        ntxt = ntxt:gsub(\" xl$\", \" XL\")\r\n        ntxt = ntxt:gsub(\" Unit$\", \" U\")\r\n        ntxt = ntxt:gsub(\"^Basic \", \"B \")\r\n        ntxt = ntxt:gsub(\"^Uncommon \", \"U \")\r\n        ntxt = ntxt:gsub(\"^Advanced \", \"A \")\r\n        ntxt = ntxt:gsub(\"^Rare \", \"R \")\r\n        ntxt = ntxt:gsub(\"^Exotic \", \"X \")\r\n        ntxt = ntxt:gsub(\" industry \", \" I \")\r\n        ntxt = ntxt:gsub(\" Industry \", \" I \")\r\n        ntxt = ntxt:gsub(\" Reinforced \", \" Rfcd \")\r\n        ntxt = ntxt:gsub(\" plastic \", \" \")\r\n        ntxt = ntxt:gsub(\" product$\", \" \")\r\n        ntxt = ntxt:gsub(\" Product$\", \" \")\r\n        ntxt = ntxt:gsub(\" Container \", \" Ctnr \")\r\n\r\n    return ntxt\r\nend\r\n\r\nfor index,id in ipairs(elementIdList) do\r\n    elementType = core_unit[1].getElementDisplayNameById(id):lower()\r\n\r\n    if (elementType:find(\"metalwork industry\")) then\r\n            if (elementType:find(\"basic\")) then\r\n            registerMachine(metalwork1, metalwork_count, 1, id)\r\n            elseif (elementType:find(\"uncommon\")) then\r\n            registerMachine(metalwork2, metalwork_count, 2, id)\r\n            elseif (elementType:find(\"advanced\")) then\r\n            registerMachine(metalwork3, metalwork_count, 3, id)\r\n            elseif (elementType:find(\"rare\")) then\r\n            registerMachine(metalwork4, metalwork_count, 4, id)\r\n            end\r\n    end\r\n    if (elementType:find(\"electronics industry\")) then\r\n            if (elementType:find(\"basic\")) then\r\n            registerMachine(electronics1, electronics_count, 1, id)\r\n            elseif (elementType:find(\"uncommon\")) then\r\n            registerMachine(electronics2, electronics_count, 2, id)\r\n            elseif (elementType:find(\"advanced\")) then\r\n            registerMachine(electronics3, electronics_count, 3, id)\r\n            elseif (elementType:find(\"rare\")) then\r\n            registerMachine(electronics4, electronics_count, 4, id)\r\n            end\r\n    end\r\n    if (elementType:find(\"glass furnace\")) then\r\n            if (elementType:find(\"basic\")) then\r\n            registerMachine(glass1, glass_count, 1, id)\r\n            elseif (elementType:find(\"uncommon\")) then\r\n            registerMachine(glass2, glass_count, 2, id)\r\n            elseif (elementType:find(\"advanced\")) then\r\n            registerMachine(glass3, glass_count, 3, id)\r\n            elseif (elementType:find(\"rare\")) then\r\n            registerMachine(glass4, glass_count, 4, id)\r\n            end\r\n    end\r\n    if (elementType:find(\"3d printer\")) then\r\n            if (elementType:find(\"basic\")) then\r\n            registerMachine(printer1, printer_count, 1, id)\r\n            elseif (elementType:find(\"uncommon\")) then\r\n            registerMachine(printer2, printer_count, 2, id)\r\n            elseif (elementType:find(\"advanced\")) then\r\n            registerMachine(printer3, printer_count, 3, id)\r\n            elseif (elementType:find(\"rare\")) then\r\n            registerMachine(printer4, printer_count, 4, id)\r\n            end\r\n    end\r\n    if (elementType:find(\"chemical industry\")) then\r\n            if (elementType:find(\"basic\")) then\r\n            registerMachine(chemical1, chemical_count, 1, id)\r\n            elseif (elementType:find(\"uncommon\")) then\r\n            registerMachine(chemical2, chemical_count, 2, id)\r\n            elseif (elementType:find(\"advanced\")) then\r\n            registerMachine(chemical3, chemical_count, 3, id)\r\n            elseif (elementType:find(\"rare\")) then\r\n            registerMachine(chemical4, chemical_count, 4, id)\r\n            end\r\n    end\r\n    if (elementType:find(\"refiner\")) and not (elementType:find(\"honeycomb\")) then\r\n            if (elementType:find(\"basic\")) then\r\n            registerMachine(refiner1, refiner_count, 1, id)\r\n            elseif (elementType:find(\"uncommon\")) then\r\n            registerMachine(refiner2, refiner_count, 2, id)\r\n            elseif (elementType:find(\"advanced\")) then\r\n            registerMachine(refiner3, refiner_count, 3, id)\r\n            elseif (elementType:find(\"rare\")) then\r\n            registerMachine(refiner4, refiner_count, 4, id)\r\n            end\r\n    end\r\n    if (elementType:find(\"smelter\")) then\r\n            if (elementType:find(\"basic\")) then\r\n            registerMachine(smelter1, smelter_count, 1, id)\r\n            elseif (elementType:find(\"uncommon\")) then\r\n            registerMachine(smelter2, smelter_count, 2, id)\r\n            elseif (elementType:find(\"advanced\")) then\r\n            registerMachine(smelter3, smelter_count, 3, id)\r\n            elseif (elementType:find(\"rare\")) then\r\n            registerMachine(smelter4, smelter_count, 4, id)\r\n            end\r\n    end\r\n    if (elementType:find(\"assembly line\")) then\r\n            if (elementType:find(\"basic\")) then\r\n            registerMachine(assembly1, assembly_count, 1, id)\r\n            elseif (elementType:find(\"uncommon\")) then\r\n            registerMachine(assembly2, assembly_count, 2, id)\r\n            elseif (elementType:find(\"advanced\")) then\r\n            registerMachine(assembly3, assembly_count, 3, id)\r\n            elseif (elementType:find(\"rare\")) then\r\n            registerMachine(assembly4, assembly_count, 4, id)\r\n            end\r\n    end\r\n    if (elementType:find(\"honeycomb\")) then\r\n            if (elementType:find(\"basic\")) then\r\n            registerMachine(honey1, honey_count, 1, id)\r\n            elseif (elementType:find(\"uncommon\")) then\r\n            registerMachine(honey2, honey_count, 2, id)\r\n            elseif (elementType:find(\"advanced\")) then\r\n            registerMachine(honey3, honey_count, 3, id)\r\n            elseif (elementType:find(\"rare\")) then\r\n            registerMachine(honey4, honey_count, 4, id)\r\n            end\r\n    end\r\n    if (elementType:find(\"recycler\")) then\r\n            if (elementType:find(\"basic\")) then\r\n            registerMachine(recycler1, recycler_count, 1, id)\r\n            elseif (elementType:find(\"uncommon\")) then\r\n            registerMachine(recycler2, recycler_count, 2, id)\r\n            elseif (elementType:find(\"advanced\")) then\r\n            registerMachine(recycler3, recycler_count, 3, id)\r\n            elseif (elementType:find(\"rare\")) then\r\n            registerMachine(recycler4, recycler_count, 4, id)\r\n            end\r\n    end\r\n end\r\n\r\nmetalwork_all = metalwork_count[1] + metalwork_count[2] + metalwork_count[3] + metalwork_count[4]\r\nelectronics_all = electronics_count[1] + electronics_count[2] + electronics_count[3] + electronics_count[4]\r\nglass_all = glass_count[1] + glass_count[2] + glass_count[3] + glass_count[4]\r\nprinter_all = printer_count[1] + printer_count[2] + printer_count[3] + printer_count[4]\r\nchemical_all = chemical_count[1] + chemical_count[2] + chemical_count[3] + chemical_count[4]\r\nrefiner_all = refiner_count[1] + refiner_count[2] + refiner_count[3] + refiner_count[4]\r\nsmelter_all = smelter_count[1] + smelter_count[2] + smelter_count[3] + smelter_count[4]\r\nassembly_all = assembly_count[1] + assembly_count[2] + assembly_count[3] + assembly_count[4]\r\nhoney_all = honey_count[1] + honey_count[2] + honey_count[3] + honey_count[4]\r\nrecycler_all = recycler_count[1] + recycler_count[2] + recycler_count[3] + recycler_count[4]\r\nall_count = honey_all + metalwork_all + electronics_all + glass_all + printer_all + chemical_all + refiner_all + smelter_all + assembly_all + recycler_all\r\n\r\nlocal layoutColumnPositions = {10, 266, 522, 778}\r\nlocal layoutMaxColumns = #layoutColumnPositions\r\nlocal layoutHeaderHeight = 40\r\nlocal layoutEntrySpacing = 10\r\nlocal layoutColumnStartY = 20\r\n\r\nlocal function getBorderLimitValue()\r\n    if type(Border) == 'number' then\r\n        return Border\r\n    end\r\n\r\n    return 600\r\nend\r\n\r\nlocal function computeRemainingCapacityForContext(columnIndex, y)\r\n    local borderLimit = getBorderLimitValue()\r\n    local currentColumn = columnIndex or 1\r\n    local currentY = y or 0\r\n    local remaining = 0\r\n\r\n    while currentColumn <= layoutMaxColumns do\r\n        if currentY >= borderLimit then\r\n            currentColumn = currentColumn + 1\r\n            currentY = layoutColumnStartY\r\n        else\r\n            remaining = remaining + 1\r\n            currentY = currentY + layoutEntrySpacing\r\n        end\r\n    end\r\n\r\n    return remaining\r\nend\r\n\r\nlocal function getRemainingCapacityForNewGroup(context)\r\n    return computeRemainingCapacityForContext(context.columnIndex, (context.y or 0) + layoutHeaderHeight)\r\nend\r\n\r\nlocal screenCapacity = computeRemainingCapacityForContext(1, 10 + layoutHeaderHeight)\r\n\r\nlocal function estimateScreensNeeded(groupCounts)\r\n    local context = { columnIndex = 1, y = 10 }\r\n    local screensNeeded = 0\r\n    local hasContent = false\r\n\r\n    local function resetContext()\r\n        context.columnIndex = 1\r\n        context.y = 10\r\n    end\r\n\r\n    local function finalizeScreen()\r\n        if hasContent then\r\n            screensNeeded = screensNeeded + 1\r\n            hasContent = false\r\n        end\r\n        resetContext()\r\n    end\r\n\r\n    for _, totalCount in ipairs(groupCounts) do\r\n        local groupTotal = tonumber(totalCount) or 0\r\n        local remaining = groupTotal\r\n        local continuing = false\r\n\r\n        repeat\r\n            if context.columnIndex > layoutMaxColumns then\r\n                finalizeScreen()\r\n            end\r\n\r\n            if not continuing and hasContent and groupTotal > 0 then\r\n                local remainingCapacity = getRemainingCapacityForNewGroup(context)\r\n                if remainingCapacity <= 0 or (groupTotal <= screenCapacity and groupTotal > remainingCapacity) then\r\n                    finalizeScreen()\r\n                end\r\n            end\r\n\r\n            while (context.y or 0) + layoutHeaderHeight >= getBorderLimitValue() do\r\n                if context.columnIndex < layoutMaxColumns then\r\n                    context.columnIndex = context.columnIndex + 1\r\n                    context.y = 10\r\n                else\r\n                    finalizeScreen()\r\n                end\r\n            end\r\n\r\n            hasContent = true\r\n            context.y = context.y + layoutHeaderHeight\r\n\r\n            while remaining > 0 do\r\n                if context.columnIndex > layoutMaxColumns then\r\n                    break\r\n                end\r\n\r\n                if context.y >= getBorderLimitValue() then\r\n                    if context.columnIndex < layoutMaxColumns then\r\n                        context.columnIndex = context.columnIndex + 1\r\n                        context.y = layoutColumnStartY\r\n                    else\r\n                        break\r\n                    end\r\n                else\r\n                    context.y = context.y + layoutEntrySpacing\r\n                    remaining = remaining - 1\r\n                end\r\n            end\r\n\r\n            if remaining > 0 then\r\n                continuing = true\r\n                finalizeScreen()\r\n            else\r\n                continuing = false\r\n            end\r\n        until remaining == 0 and not continuing\r\n    end\r\n\r\n    if hasContent then\r\n        screensNeeded = screensNeeded + 1\r\n    end\r\n\r\n    if screensNeeded == 0 then\r\n        screensNeeded = 1\r\n    end\r\n\r\n    return screensNeeded\r\nend\r\n\r\nlocal required_screens = estimateScreensNeeded({\r\n    electronics_all,\r\n    chemical_all,\r\n    glass_all,\r\n    printer_all,\r\n    refiner_all,\r\n    smelter_all,\r\n    honey_all,\r\n    recycler_all,\r\n    assembly_all,\r\n    metalwork_all\r\n})\r\n\r\nlocal screen_plural = \"screen\"\r\nif required_screens ~= 1 then screen_plural = \"screens\" end\r\n\r\nsystem.print((\"Factory has %d machines. You will need %d %s with current settings.\"):format(\r\n    all_count,\r\n    required_screens,\r\n    screen_plural,\r\n    screenCapacity\r\n))\r\n\r\nif required_screens > #screens then\r\n    local missing = required_screens - #screens\r\n    local missingPlural = \"screen\"\r\n    if missing ~= 1 then missingPlural = \"screens\" end\r\n    system.print(string.format(\"Connect %d more %s to display everything.\", missing, missingPlural))\r\nend\r\n\r\nunit.setTimer(\"refresh\",Refresh_Timer)","filter":{"args":[],"signature":"onStart()","slotKey":"-1"},"key":"0"}],"methods":[],"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-5":{"name":"library","type":{"events":[],"methods":[]}},"-4":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"player","type":{"events":[],"methods":[]}},"-2":{"name":"construct","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}}}}