{"events":[],"handlers":[{"code":"local T=text\r\n\r\nindy_type ={\"metalwork\",\"printer\",\"chemical\",\"glass\",\"refiner\",\"smelter\",\"assembler\", \"electronics\", \"honey\", \"recycler\"}\r\n\r\n--local check=string.find(T,\"/help\")\r\n\r\n\r\nif string.find(T,\"help\") then\r\n system.print(\"--- Industry locator ---\")   \r\n system.print(\"Syntax:\")\r\n system.print(\"[machine_type] [tier] [number]\")\r\n system.print(\"ex: assembler t1 1\")\r\n system.print(\"possible machine types: metalwork, printer, chemical, glass, refiner, honey, smelter, electronics, assembler, recycler\")\r\n system.print(\"to clear an arrow type: clear [index]\")\r\n system.print(\"ex: clear 18\")\r\n system.print(\"\")\r\n system.print(\"For assistance contact Bartas (game) or BartasRS#2742 (discord)\")    \r\n end\r\nif string.find(T,\"clear\") then\r\n    str = string.gsub(T, \"clear\" ,\"\")\r\n core_unit[1].deleteSticker(tonumber(str))\r\n end\r\n\r\nif string.find(T, indy_type[1]) then\r\n   str = string.gsub(T, indy_type[1],\"\")\r\n   \r\n       if string.find(str, \"t1\") then \r\n          str = string.gsub(str, \"t1\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(metalwork1[iid])\r\n          --core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\")\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end\r\n        if string.find(str, \"t2\") then \r\n          str = string.gsub(str, \"t2\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(metalwork2[iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end\r\n        if string.find(str, \"t3\") then \r\n          str = string.gsub(str, \"t3\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(metalwork3[iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end\r\n        if string.find(str, \"t4\") then \r\n          str = string.gsub(str, \"t4\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(metalwork4[iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end\r\n    \r\nelseif string.find(T, indy_type[2]) then\r\n   str = string.gsub(T, indy_type[2],\"\")\r\n   \r\n       if string.find(str, \"t1\") then \r\n          str = string.gsub(str, \"t1\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(printer1[iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end\r\n        if string.find(str, \"t2\") then \r\n          str = string.gsub(str, \"t2\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(printer2[id])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end\r\n        if string.find(str, \"t3\") then \r\n          str = string.gsub(str, \"t3\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(printer3[iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end\r\n        if string.find(str, \"t4\") then \r\n          str = string.gsub(str, \"t4\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(printer4[iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end\r\nelseif string.find(T, indy_type[3]) then\r\n   str = string.gsub(T, indy_type[3],\"\")\r\n   \r\n       if string.find(str, \"t1\") then \r\n          str = string.gsub(str, \"t1\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(chemical1[iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+6,\"down\"))\r\n          end\r\n        if string.find(str, \"t2\") then \r\n          str = string.gsub(str, \"t2\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(chemical2[iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+6,\"down\"))\r\n          end\r\n        if string.find(str, \"t3\") then \r\n          str = string.gsub(str, \"t3\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(chemical3[iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+6,\"down\"))\r\n          end\r\n        if string.find(str, \"t4\") then \r\n          str = string.gsub(str, \"t4\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(chemical4[iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+6,\"down\"))\r\n          end\r\nelseif string.find(T, indy_type[4]) then\r\n   str = string.gsub(T, indy_type[4],\"\")\r\n   \r\n       if string.find(str, \"t1\") then \r\n          str = string.gsub(str, \"t1\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(glass1[iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+6,\"down\"))\r\n          end\r\n        if string.find(str, \"t2\") then \r\n          str = string.gsub(str, \"t2\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(glass2[iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+6,\"down\"))\r\n          end\r\n        if string.find(str, \"t3\") then \r\n          str = string.gsub(str, \"t3\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(glass3[iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+6,\"down\"))\r\n          end\r\n        if string.find(str, \"t4\") then \r\n          str = string.gsub(str, \"t4\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(glass4[iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+6,\"down\"))\r\n          end     \r\nelseif string.find(T, indy_type[5]) then\r\n   str = string.gsub(T, indy_type[5],\"\")\r\n   \r\n       if string.find(str, \"t1\") then \r\n          str = string.gsub(str, \"t1\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(refiner1[iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end\r\n        if string.find(str, \"t2\") then \r\n          str = string.gsub(str, \"t2\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(refiner2[iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end\r\n        if string.find(str, \"t3\") then \r\n          str = string.gsub(str, \"t3\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(refiner3[iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end\r\n        if string.find(str, \"t4\") then \r\n          str = string.gsub(str, \"t4\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(refiner4[iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end\r\nelseif string.find(T, indy_type[6]) then\r\n   str = string.gsub(T, indy_type[6],\"\")\r\n   \r\n       if string.find(str, \"t1\") then \r\n          str = string.gsub(str, \"t1\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(smelter1[iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end\r\n        if string.find(str, \"t2\") then \r\n          str = string.gsub(str, \"t2\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(smelter2[iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end\r\n        if string.find(str, \"t3\") then \r\n          str = string.gsub(str, \"t3\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(smelter3[iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end\r\n        if string.find(str, \"t4\") then \r\n          str = string.gsub(str, \"t4\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(smelter4[iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end\r\nelseif string.find(T, indy_type[9]) then\r\n   str = string.gsub(T, indy_type[9],\"\")\r\n   \r\n       if string.find(str, \"t1\") then \r\n          str = string.gsub(str, \"t1\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(honey1[iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end\r\n        if string.find(str, \"t2\") then \r\n          str = string.gsub(str, \"t2\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(honey2[iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end\r\n        if string.find(str, \"t3\") then \r\n          str = string.gsub(str, \"t3\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(honey3[iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end\r\n        if string.find(str, \"t4\") then \r\n          str = string.gsub(str, \"t4\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(honey4[iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end\r\nelseif string.find(T, indy_type[7]) then\r\n   str = string.gsub(T, indy_type[7],\"\")\r\n   \r\n       if string.find(str, \"t1\") then \r\n          str = string.gsub(str, \"t1\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(assembly1[iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end\r\n        if string.find(str, \"t2\") then \r\n          str = string.gsub(str, \"t2\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(assembly2[iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end\r\n        if string.find(str, \"t3\") then \r\n          str = string.gsub(str, \"t3\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(assembly3[iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end\r\n        if string.find(str, \"t4\") then \r\n          str = string.gsub(str, \"t4\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(assembly4[iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end\r\nelseif string.find(T, indy_type[8]) then\r\n   str = string.gsub(T, indy_type[8],\"\")\r\n   \r\n       if string.find(str, \"t1\") then \r\n          str = string.gsub(str, \"t1\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(electronics[1][iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end\r\n        if string.find(str, \"t2\") then \r\n          str = string.gsub(str, \"t2\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(electronics[2][iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end\r\n        if string.find(str, \"t3\") then \r\n          str = string.gsub(str, \"t3\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(electronics[3][iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end\r\n        if string.find(str, \"t4\") then \r\n          str = string.gsub(str, \"t4\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(electronics[4][iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end    \r\n    elseif string.find(T, indy_type[9]) then\r\n   str = string.gsub(T, indy_type[9],\"\")\r\n   \r\n       if string.find(str, \"t1\") then \r\n          str = string.gsub(str, \"t1\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(recycler[1][iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end\r\n        if string.find(str, \"t2\") then \r\n          str = string.gsub(str, \"t2\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(recycler[2][iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end\r\n        if string.find(str, \"t3\") then \r\n          str = string.gsub(str, \"t3\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(recycler[3][iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end\r\n        if string.find(str, \"t4\") then \r\n          str = string.gsub(str, \"t4\",\"\")\r\n          iid = tonumber(str)\r\n          c_pos = core_unit[1].getElementPositionById(recycler[4][iid])\r\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\r\n          end    \r\nend","filter":{"args":[{"variable":"*"}],"signature":"onInputText(text)","slotKey":"-4"},"key":"0"},{"code":"local posy = 10\nlocal t_posy = 10\nc=1\n\ncolumn = {10, 266, 522, 778}\n\nf_state = function(fid,F)\n    state = core_unit[1].getElementIndustryInfoById(fid)[\"state\"]\n        if state < 1 and F == 0 then\n        t = core_unit[1].getElementIndustryInfoById(fid)[\"currentProducts\"]\n        tt = string.gsub(system.getItem(t[1][\"id\"])[\"displayNameWithSize\"], \"Advanced\",\"Adv.\")\n        tt = string.gsub(tt, \"hydraulics\",\"Hydraulics\")\n        tt = string.gsub(tt, \"Uncommon\",\"Unc.\")\n        tt = string.gsub(tt, \" product\",\"\")\n        return tt .. \" - Error\" .. state\n        elseif state == 1 and F == 0 then\n        local industryInfo = core_unit[1].getElementIndustryInfoById(fid)\n            if industryInfo == nil then\n            return \"Not configured\"\n            end\n        local currentProducts = industryInfo[\"currentProducts\"]\n            if currentProducts == nil or #currentProducts == 0 then\n            return \"Not configured\"\n            end\n        local productInfo = system.getItem(currentProducts[1][\"id\"])\n            if productInfo == nil then\n            return \"Not configured\"\n            end\n        local displayNameWithSize = productInfo[\"displayNameWithSize\"]\n        local tt = string.gsub(displayNameWithSize, \"Advanced\",\"Adv.\")\n        tt = string.gsub(tt, \"hydraulics\",\"Hydraulics\")\n        tt = string.gsub(tt, \"Uncommon\",\"Unc.\")\n        tt = string.gsub(tt, \" product\",\"\")\n        return tt .. \" - Stopped\"\n        elseif state == 2 and F == 0 then \n        t = core_unit[1].getElementIndustryInfoById(fid)[\"currentProducts\"]\n        tt = string.gsub(system.getItem(t[1][\"id\"])[\"displayNameWithSize\"], \"Advanced\",\"Adv.\")\n        tt = string.gsub(tt, \"hydraulics\",\"Hydraulics\")\n        tt = string.gsub(tt, \"Uncommon\",\"Unc.\")\n        tt = string.gsub(tt, \" product\",\"\")\n        return tt .. \" - Running\"\n        elseif state == 3 and F == 0 then \n        t = core_unit[1].getElementIndustryInfoById(fid)[\"currentProducts\"]\n        tt = string.gsub(system.getItem(t[1][\"id\"])[\"displayNameWithSize\"], \"Advanced\",\"Adv.\")\n        tt = string.gsub(tt, \"hydraulics\",\"Hydraulics\")\n        tt = string.gsub(tt, \"Uncommon\",\"Unc.\")\n        tt = string.gsub(tt, \" product\",\"\")\n        return tt .. \" - Missing ingredient\"\n        elseif state == 4 and F == 0 then \n        t = core_unit[1].getElementIndustryInfoById(fid)[\"currentProducts\"]\n        tt = string.gsub(system.getItem(t[1][\"id\"])[\"displayNameWithSize\"], \"Advanced\",\"Adv.\")\n        tt = string.gsub(tt, \"hydraulics\",\"Hydraulics\")\n        tt = string.gsub(tt, \"Uncommon\",\"Unc.\")\n        tt = string.gsub(tt, \" product\",\"\")\n        return tt .. \" - Output full\"\n        elseif state == 5 and F == 0 then\n        t = core_unit[1].getElementIndustryInfoById(fid)[\"currentProducts\"]\n        tt = string.gsub(system.getItem(t[1][\"id\"])[\"displayNameWithSize\"], \"Advanced\",\"Adv.\")\n        tt = string.gsub(tt, \"hydraulics\",\"Hydraulics\")\n        tt = string.gsub(tt, \"Uncommon\",\"Unc.\")\n        tt = string.gsub(tt, \" product\",\"\")\n        return tt .. \" - No output container\"\n        elseif state == 6 and F == 0 then \n        t = core_unit[1].getElementIndustryInfoById(fid)[\"currentProducts\"]\n        tt = string.gsub(system.getItem(t[1][\"id\"])[\"displayNameWithSize\"], \"Advanced\",\"Adv.\")\n        tt = string.gsub(tt, \"hydraulics\",\"Hydraulics\")\n        tt = string.gsub(tt, \"Uncommon\",\"Unc.\")\n        tt = string.gsub(tt, \" product\",\"\")\n        return tt .. \" - Pending\"\n        elseif state == 7 and F == 0 then\n        t = core_unit[1].getElementIndustryInfoById(fid)[\"currentProducts\"]\n        tt = string.gsub(system.getItem(t[1][\"id\"])[\"displayNameWithSize\"], \"Advanced\",\"Adv.\")\n        tt = string.gsub(tt, \"hydraulics\",\"Hydraulics\")\n        tt = string.gsub(tt, \"Uncommon\",\"Unc.\")\n        tt = string.gsub(tt, \" product\",\"\")\n        return tt .. \" - Missing schematics\"\n        elseif state > 7 and F == 0 then\n        t = core_unit[1].getElementIndustryInfoById(fid)[\"currentProducts\"]\n        tt = string.gsub(system.getItem(t[1][\"id\"])[\"displayNameWithSize\"], \"Advanced\",\"Adv.\")\n        tt = string.gsub(tt, \"hydraulics\",\"Hydraulics\")\n        tt = string.gsub(tt, \"Uncommon\",\"Unc.\")\n        tt = string.gsub(tt, \" product\",\"\")\n        return tt .. \" - Error\" .. state\n    end\nend\n\nf_stateWithElementName = function(fid)\n    state = core_unit[1].getElementIndustryInfoById(fid)[\"state\"]\n    elementName = core_unit[1].getElementNameById(fid)\n    elementName = string.gsub(elementName, \"Craft \", \"\")\n\t\n    if state == 1 then\n\t\tif isElementConfigured(fid) then\n\t\t\treturn \"Stopped     \" .. elementName\n\t\telse\n\t\t\treturn \"Unconfig    \" .. elementName\n\t\tend\n\telseif state == 2 then return \"Running     \" .. elementName\n\telseif state == 3 then return \"Ingredient  \" .. elementName\n\telseif state == 4 then return \"Output full \" .. elementName\n\telseif state == 5 then return \"No output   \" .. elementName\n\telseif state == 6 then return \"Pending     \" .. elementName\n\telseif state == 7 then return \"Schematic   \" .. elementName\n\telseif state > 7 then return  \"ERROR       \" .. elementName\n    end\t\t\t\t\t\t\t  \nend\n\nisElementConfigured = function(fid)\n\tlocal industryInfo = core_unit[1].getElementIndustryInfoById(fid)\n\t\tif industryInfo == nil then\n\t\t\treturn false\n\t\tend\n\tlocal currentProducts = industryInfo[\"currentProducts\"]\n\t\tif currentProducts == nil or #currentProducts == 0 then\n\t\t\treturn false\n\t\tend\n\tlocal productInfo = system.getItem(currentProducts[1][\"id\"])\n\t\tif productInfo == nil then\n\t\t\treturn false\n\t\tend\n\n\treturn true\nend\n\nsetNextFillColourByState = function(fid)\n    state = core_unit[1].getElementIndustryInfoById(fid)[\"state\"]\n    if state == 1 then return \"setNextFillColor(layer,1,1,0,1)\"\n        elseif state == 2 then return \"setNextFillColor(layer,0,1,0,1)\"\n        elseif state == 3 then return \"setNextFillColor(layer,1,0,0.8,1)\"\n        elseif state == 4 then return \"setNextFillColor(layer,1,0.5,0,1)\"\n        elseif state == 5 then return \"setNextFillColor(layer,1,0,0,1)\"\n        elseif state == 6 then return \"setNextFillColor(layer,0,0.5,1,1)\"\n        elseif state == 7 then return \"setNextFillColor(layer,1,0,0,1)\"\n        else return \"\"\n    end\nend\n\ngetItemTier = function(fid)\n    local info = core_unit[1].getElementIndustryInfoById(fid)[\"currentProducts\"]\n    if info and #info >= 1 then\n        local item = system.getItem(info[1][\"id\"])\n        if item then return item[\"tier\"] end\n    end\n    return 0\nend\n\nindy_column = function(indy, tier, posx, posy)\n    if indy[0] == 0 then \n        return \"\" \n    else    \n        stxt = \"\"\n        if tier <= 1 then t_color = \"setDefaultFillColor(layer, Shape_Text, \".. tier1colour ..\", 1)\\n\" end\n        if tier == 2 then t_color = \"setDefaultFillColor(layer, Shape_Text, \".. tier2colour ..\", 1)\\n\" end\n        if tier == 3 then t_color = \"setDefaultFillColor(layer, Shape_Text, \".. tier3colour ..\", 1)\\n\" end\n        if tier == 4 then t_color = \"setDefaultFillColor(layer, Shape_Text, \".. tier4colour ..\", .5)\\n\" end\n        if tier >= 5 then t_color = \"setDefaultFillColor(layer, Shape_Text, \".. tier5colour ..\", 1)\\n\" end\n        \n        if Show_Indy_name then\n            --create table of machines\n            local machines = {}\n            for index,id in ipairs(indy) do\n                if (not SortByItemTier) or (getItemTier(id) == tier) then\n                    local machine = {mid = id, name = string.gsub(core_unit[1].getElementNameById(id), \"Craft \", \"\")}\n                    table.insert(machines, machine)\n                end\n            end\n                \n            --Sort table by name\n            table.sort(machines, function(a,b) \n                return a.name < b.name\n                end)\n                \n            --create table of columns\n            for index,machine in ipairs(machines) do\n                local id = machine.mid\n                if index<10 then \n                    num= \"00\" .. tostring(index) \n                elseif index<100 then \n                    num= \"0\" .. tostring(index) \n                else \n                    num = tostring(index) \n                end\n                \n                --Move to next column if position is greater than border\n                if posy >= border then \n                    posy=20 c=c+1 \n                end       \n            \n                --Add text to table\n                stxt = stxt ..\"addText(layer, font3, \\\"\" .. num..\"\\\", \".. column[c] .. \",\" .. posy ..\")\\n\" .. setNextFillColourByState(id) .. \"addText(layer, font3,\\\"\" .. f_stateWithElementName(id).. \"\\\" , \" .. column[c] + 20 .. \",\" .. posy .. \")\\n\"\n            \n                posy = posy +10\n            end\n\n            t_posy = posy\n            return t_color .. stxt .. \" c=\" .. c .. \"\\n\"\n        else\n            --create table of Industry\n            local industryUnits = {}\n            for _,id in ipairs(indy) do\n                local industryInfo = core_unit[1].getElementIndustryInfoById(id)[\"currentProducts\"]\n                if industryInfo and #industryInfo >= 1 then\n                    local itemInfo = system.getItem(industryInfo[1][\"id\"])\n                    if itemInfo and ((not SortByItemTier) or itemInfo[\"tier\"] == tier) then\n                        local tempName = itemInfo[\"displayNameWithSize\"]\n                        local name = getName(tempName)\n                        table.insert(industryUnits, {mid = id, name = string.lower(name)})\n                    end\n                end\n            end\n\n            --Sort table by name\n            table.sort(industryUnits, function(a,b) \n                return a.name < b.name \n                end)\n\n            --create table of columns\n            for index,industryUnit in ipairs(industryUnits) do\n                local id = industryUnit.mid\n                if index < 10 then\n                    num = \"00\" .. tostring(index)\n                elseif index < 100 then\n                    num = \"0\" .. tostring(index)\n                else\n                    num = tostring(index)\n                end\n            \n            --Move to next column if position is greater than border\n            if posy >= border then\n                posy = 20 c=c+1\n            end\n\n            --Add text to table\n            stxt = stxt ..\"addText(layer, font3, \\\"\" .. num..\"\\\", \".. column[c] .. \",\" .. posy ..\")\\n\" .. setNextFillColourByState(id) .. \"addText(layer, font3,\\\"\" .. f_state(id,0).. \"\\\" , \" .. column[c] + 20 .. \",\" .. posy .. \")\\n\"\n       \n            posy = posy + 10\n        end\n\n        t_posy = posy\n        return t_color .. stxt .. \" c=\" .. c .. \"\\n\"\n        end\n    end\nend\n\nlocal function mergeTables(...)\n    local result = {}\n    for _,t in ipairs({...}) do\n        for _,v in ipairs(t) do table.insert(result, v) end\n    end\n    return result\nend\n\nrenderIndustry = function(allList, t1, t2, t3, t4)\n    if SortByItemTier then\n        return indy_column(allList,1,column[c],t_posy+40) ..\n               indy_column(allList,2,column[c],t_posy) ..\n               indy_column(allList,3,column[c],t_posy) ..\n               indy_column(allList,4,column[c],t_posy) ..\n               indy_column(allList,5,column[c],t_posy)\n    else\n        return indy_column(t1,1,column[c],t_posy+40) ..\n               indy_column(t2,2,column[c],t_posy) ..\n               indy_column(t3,3,column[c],t_posy) ..\n               indy_column(t4,4,column[c],t_posy)\n    end\nend\n\nlocal electronicsAllList, printerAllList, chemicalAllList, glassAllList\nlocal refinerAllList, smelterAllList, honeyAllList, recyclerAllList\nlocal assemblyAllList, metalworkAllList\n\nif SortByItemTier then\n    electronicsAllList = mergeTables(electronics1, electronics2, electronics3, electronics4)\n    printerAllList = mergeTables(printer1, printer2, printer3, printer4)\n    chemicalAllList = mergeTables(chemical1, chemical2, chemical3, chemical4)\n    glassAllList = mergeTables(glass1, glass2, glass3, glass4)\n    refinerAllList = mergeTables(refiner1, refiner2, refiner3, refiner4)\n    smelterAllList = mergeTables(smelter1, smelter2, smelter3, smelter4)\n    honeyAllList = mergeTables(honey1, honey2, honey3, honey4)\n    recyclerAllList = mergeTables(recycler1, recycler2, recycler3, recycler4)\n    assemblyAllList = mergeTables(assembly1, assembly2, assembly3, assembly4)\n    metalworkAllList = mergeTables(metalwork1, metalwork2, metalwork3, metalwork4)\nend\n\nscreen_one = [[\nlocal layer = createLayer()\nlocal rx, ry = getResolution()\n\nlocal font = loadFont(\"Oxanium\", 12)\nlocal font3 = loadFont(\"RobotoCondensed\", 11)\n\nlocal column = {10, 266, 522, 778}\n\nsetDefaultFillColor(layer, Shape_Text, 0,0,1,1)\nsetDefaultStrokeColor(layer, Shape_Line, 0,.3,2,1)\nsetDefaultStrokeColor(layer, Shape_BoxRounded, 0,.3,2,1)\n\nsetNextFillColor(layer, 0,0,0,0)\nsetNextStrokeWidth(layer, 1)\naddBoxRounded(layer, 0, 0, rx, ry, 10)\n\nlocal div = rx/4\nlocal posy = 10\n\nlocal header = function(tag, y, p, n)\n    setNextFillColor(layer, 0,0,1,0.2)\n    setNextStrokeWidth(layer, .1)\n    addBoxRounded(layer, p, y, div - 20, 20, 4)\n    setNextTextAlign(layer, AlignH_Center, AlignV_Middle)\n    setNextFillColor(layer, 1,1,1,1)\n    addText(layer, font, \"(\" .. n .. \") \" .. tag, div/2+(p)-10, y+11)    \nend\n\nfor x = 1,5 do addLine (layer, div*x, 0, div*x, ry) end\n\nlocal c = 1\n\nheader(\"Electronics Industry\", ]].. t_posy ..[[, column[c], ]]..electronics_all..[[)\n]] .. renderIndustry(electronicsAllList, electronics1, electronics2, electronics3, electronics4) .. [[\n\nheader(\"3D Printers\", ]].. t_posy ..[[, column[c], ]]..printer_all..[[)\n]] .. renderIndustry(printerAllList, printer1, printer2, printer3, printer4) .. [[\n\nheader(\"Chemical Industry\", ]].. t_posy ..[[, column[c], ]]..chemical_all..[[)\n]] .. renderIndustry(chemicalAllList, chemical1, chemical2, chemical3, chemical4) .. [[\n\nheader(\"Glass Industry\", ]].. t_posy ..[[, column[c], ]]..glass_all..[[)\n]] .. renderIndustry(glassAllList, glass1, glass2, glass3, glass4) .. [[\n]]\n\nposy = 10\nt_posy = 10\nc=1\n\nscreen_two = [[\nlocal layer = createLayer()\nlocal rx, ry = getResolution()\n\nlocal font = loadFont(\"Oxanium\", 12)\nlocal font3 = loadFont(\"RobotoCondensed\", 11)\n\nlocal column = {10, 266, 522, 778}\n\nsetDefaultFillColor(layer, Shape_Text, 0,0,1,1)\nsetDefaultStrokeColor(layer, Shape_Line, 0,.3,2,1)\nsetDefaultStrokeColor(layer, Shape_BoxRounded, 0,.3,2,1)\n\nsetNextFillColor(layer, 0,0,0,0)\nsetNextStrokeWidth(layer, 1)\naddBoxRounded(layer, 0, 0, rx, ry, 10)\n\nlocal div = rx/4\nlocal posy = 10\n\nlocal header = function(tag, y, p, n)\n    setNextFillColor(layer, 0,0,1,0.2)\n    setNextStrokeWidth(layer, .1)\n    addBoxRounded(layer, p, y, div - 20, 20, 4)\n    setNextTextAlign(layer, AlignH_Center, AlignV_Middle)\n    setNextFillColor(layer, 1,1,1,1)\n    addText(layer, font, \"(\" .. n .. \") \" .. tag, div/2+(p)-10, y+11)    \nend\n\nfor x = 1,5 do addLine (layer, div*x, 0, div*x, ry) end\n\nlocal c = 1\n\nheader(\"Refiners\", ]].. t_posy ..[[, column[c], ]]..refiner_all..[[)\n]] .. renderIndustry(refinerAllList, refiner1, refiner2, refiner3, refiner4) .. [[\n\nheader(\"Smelters\", ]].. t_posy ..[[, column[c], ]]..smelter_all..[[)\n]] .. renderIndustry(smelterAllList, smelter1, smelter2, smelter3, smelter4) .. [[\n\nheader(\"Honeycomb\", ]].. t_posy ..[[, column[c], ]]..honey_all..[[)\n]] .. renderIndustry(honeyAllList, honey1, honey2, honey3, honey4) .. [[\n\nheader(\"Recyclers\", ]].. t_posy ..[[, column[c], ]]..recycler_all..[[)\n]] .. renderIndustry(recyclerAllList, recycler1, recycler2, recycler3, recycler4) .. [[\n]]\n\nposy = 10\nt_posy = 10\nc=1\ncolumn = {10, 266, 522, 778}\n\nscreen_three = [[\nlocal layer = createLayer()\nlocal rx, ry = getResolution()\n\nlocal font = loadFont(\"Oxanium\", 12)\nlocal font3 = loadFont(\"RobotoCondensed\", 11)\n\ncolumn = {10, 266, 522, 778}\n\nsetDefaultFillColor(layer, Shape_Text, 0,0,1,1)\nsetDefaultStrokeColor(layer, Shape_Line, 0,.3,2,1)\nsetDefaultStrokeColor(layer, Shape_BoxRounded, 0,.3,2,1)\n\nsetNextFillColor(layer, 0,0,0,0)\nsetNextStrokeWidth(layer, 1)\naddBoxRounded(layer, 0, 0, rx, ry, 10)\n\nlocal div = rx/4\nlocal posy = 10\n\nlocal header = function(tag, y, p, n)\n    setNextFillColor(layer, 0,0,1,0.2)\n    setNextStrokeWidth(layer, .1)\n    addBoxRounded(layer, p, y, div - 20, 20, 4)\n    setNextTextAlign(layer, AlignH_Center, AlignV_Middle)\n    setNextFillColor(layer, 1,1,1,1)\n    addText(layer, font, \"(\" .. n .. \") \" .. tag, div/2+(p)-10, y+11)    \nend\n\nfor x = 1,5 do addLine (layer, div*x, 0, div*x, ry) end\n\nlocal c = 1\n\nheader(\"Assembly Lines\", ]].. t_posy ..[[, column[c], ]]..assembly_all..[[)\n]] .. renderIndustry(assemblyAllList, assembly1, assembly2, assembly3, assembly4) .. [[\n\n]]\n\nposy = 10\nt_posy = 10\nc=1\ncolumn = {10, 266, 522, 778}\n\nscreen_four = [[\nlocal layer = createLayer()\nlocal rx, ry = getResolution()\n\nlocal font = loadFont(\"Oxanium\", 12)\nlocal font3 = loadFont(\"RobotoCondensed\", 11)\n\ncolumn = {10, 266, 522, 778}\n\nsetDefaultFillColor(layer, Shape_Text, 0,0,1,1)\nsetDefaultStrokeColor(layer, Shape_Line, 0,.3,2,1)\nsetDefaultStrokeColor(layer, Shape_BoxRounded, 0,.3,2,1)\n\nsetNextFillColor(layer, 0,0,0,0)\nsetNextStrokeWidth(layer, 1)\naddBoxRounded(layer, 0, 0, rx, ry, 10)\n\nlocal div = rx/4\nlocal posy = 10\n\nlocal header = function(tag, y, p, n)\n    setNextFillColor(layer, 0,0,1,0.2)\n    setNextStrokeWidth(layer, .1)\n    addBoxRounded(layer, p, y, div - 20, 20, 4)\n    setNextTextAlign(layer, AlignH_Center, AlignV_Middle)\n    setNextFillColor(layer, 1,1,1,1)\n    addText(layer, font, \"(\" .. n .. \") \" .. tag, div/2+(p)-10, y+11)\nend\n\nfor x = 1,5 do addLine (layer, div*x, 0, div*x, ry) end\n\nlocal c = 1\n\nheader(\"Metalwork Industry\", ]].. t_posy ..[[, column[c], ]]..metalwork_all..[[)\n]] .. renderIndustry(metalworkAllList, metalwork1, metalwork2, metalwork3, metalwork4) .. [[\n\n]]\n\nscreens[1].activate()\nscreens[2].activate()\nscreens[3].activate()\nscreens[4].activate()\n\nscreens[1].setRenderScript(screen_one)\nscreens[2].setRenderScript(screen_two)\nscreens[3].setRenderScript(screen_three)\nscreens[4].setRenderScript(screen_four)\n--screens[5].setRenderScript(screen_five)","filter":{"args":[{"value":"refresh"}],"signature":"onTimer(timerid)","slotKey":"-1"},"key":"0"},{"code":"if databank ~= nil then\n    databank.setStringValue(\"options\", json.encode(options))\nend","filter":{"args":[],"signature":"onStop()","slotKey":"-1"},"key":"0"},{"code":"-- Script created by Bartas (ingame), BartasRS#2742 (Discord)\n-- Updates provided by Vtreka (ingame), Vtreka#1337 (Discord)\n-- Contributions provided by BlimpieBoy (ingame), Blimpieboy#0903 (Discord)\n\nsystem.print(\" --- Factory Monitor Expanded v2.3.1 ---\")\nsystem.print (\"type 'help' for available commands\")\n\n--[[ LUA PARAMETERS ]]\nuseDatabankValues = true --export: If checked and if values were saved in databank, parmaters will be loaded from the databank, if not, following ones will be used\nShow_Indy_name = false --export: Shows Industry Unit name instead of element being crafted if checked\nborder = 550 --export: Bottom display line<br>Maximum 600<br>Use to adjust\nRefresh_timer = 5 --export: Screen(s) refresh timer in seconds\ntier1colour = '1, 1, 1' --export: Set Tier 1 Colour\ntier2colour = '0, 1, 0' --export: Set Tier 2 Colour\ntier3colour = '0, 0, 1' --export: Set Tier 3 Colour\ntier4colour = '.3, 0, .5' --export: Set Tier 4 Colour\ntier5colour = '1, 1, 0' --export: Set Tier 5 Colour\nSortByItemTier = false --export: Sort by item tier instead of Industry Unit tier\n\nsystem.print(\"Refresh timer set to: \"..Refresh_timer..\" seconds\")\n\noptions = {}\noptions.Show_Indy_name = Show_Indy_name\noptions.border = border\noptions.tier1colour = tier1colour\noptions.tier2colour = tier2colour\noptions.tier3colour = tier3colour\noptions.tier4colour = tier4colour\noptions.tier5colour = tier5colour\noptions.SortByItemTier = SortByItemTier\n\ndatabank = nil\nscreens = {}\ncore_unit = {}\n--local json = require('dkjson')\n\nfor slot_name, slot in pairs(unit) do\n    if type(slot) == \"table\"\n        and type(slot.export) == \"table\"\n        and slot.getClass\n    then\n        slot.slotname = slot_name\n        if slot.getClass():lower():find('screenunit') then \n            table.insert(screens,slot)\n            slot.activate()\n        elseif slot.getClass():lower():find('coreunit') then table.insert(core_unit,slot)\n        elseif slot.getClass():lower() == 'databankunit' then\n            databank = slot\n        end\n    end\nend\n\nif #screens == 0 then\n    system.print(\"No screen detected\")\nelse\n    table.sort(screens, function(a,b) return a.slotname < b.slotname end)\n    local plural = \"\"\n    if #screens > 1 then plural = \"s\" end\n    system.print(#screens .. \" screen\" .. plural .. \" connected\")\nend\n\nif #core_unit == 0 then\n    system.print(\"No core detected\") else system.print(\"Core connected\")\nend\n\nif databank == nil then\n    system.print(\"No Databank Detected\")\nelse\n    system.print(\"Databank Connected\")\n    if (databank.hasKey(\"options\")) and (useDatabankValues == true) then\n        local db_options = json.decode(databank.getStringValue(\"options\"))\n        if db_options then\n            for key, value in pairs(options) do\n                if db_options[key] then options[key] = db_options[key] end\n            end\n            system.print(\"Options Loaded From Databank\")\n        else\n            system.print(\"No parameters saved to Databank. Restart the Programming Board\")\n        end\n    else\n        system.print(\"Options Loaded From LUA Parameters\")\n    end\nend\n\nelementIdList = core_unit[1].getElementIdList()\n\n\nmetalwork1 = {}\nmetalwork2 = {}\nmetalwork3 = {}\nmetalwork4 = {}\n\nelectronics1 = {}\nelectronics2 = {}\nelectronics3 = {}\nelectronics4 = {}\n\nglass1 = {}\nglass2 = {}\nglass3 = {}\nglass4 = {}\n\nprinter1 = {}\nprinter2 = {}\nprinter3 = {}\nprinter4 = {}\n\nchemical1 = {}\nchemical2 = {}\nchemical3 = {}\nchemical4 = {}\n\nrefiner1 = {}\nrefiner2 = {}\nrefiner3 = {}\nrefiner4 = {} \n\nsmelter1 = {}\nsmelter2 = {}\nsmelter3 = {}\nsmelter4 = {}\n\nhoney1 = {}\nhoney2 = {}\nhoney3 = {}\nhoney4 = {}\n\nrecycler1 = {}\nrecycler2 = {}\nrecycler3 = {}\nrecycler4 = {}\n\n-- Assembly Lines --\n\nassembly1 = {}\nassembly2 = {}\nassembly3 = {}\nassembly4 = {}\n \nmetalwork_count = {0,0,0,0}\nelectronics_count = {0,0,0,0}\nglass_count = {0,0,0,0}\nprinter_count = {0,0,0,0}\nchemical_count = {0,0,0,0}\nrefiner_count = {0,0,0,0}\nsmelter_count = {0,0,0,0}\nassembly_count = {0,0,0,0}\nhoney_count = {0,0,0,0}\nrecycler_count = {0,0,0,0}\n\n\n---- substitution list, credits to Squizz Cephinator\nlocal ntxt = \"\"\nfunction getName(ntxt)    \n      \n        ntxt = ntxt:gsub(\" xs$\", \" XS\")\n        ntxt = ntxt:gsub(\" s$\", \" S\")\n        ntxt = ntxt:gsub(\" m$\", \" M\")\n        ntxt = ntxt:gsub(\" l$\", \" L\")\n        ntxt = ntxt:gsub(\" xl$\", \" XL\")\n        ntxt = ntxt:gsub(\" Unit$\", \" U\")\n        ntxt = ntxt:gsub(\"^Basic \", \"B \")\n        ntxt = ntxt:gsub(\"^Uncommon \", \"U \")\n        ntxt = ntxt:gsub(\"^Advanced \", \"A \")\n        ntxt = ntxt:gsub(\"^Rare \", \"R \")\n        ntxt = ntxt:gsub(\"^Exotic \", \"X \")\n        ntxt = ntxt:gsub(\" industry \", \" I \")\n        ntxt = ntxt:gsub(\" Industry \", \" I \")\n        ntxt = ntxt:gsub(\" Reinforced \", \" Rfcd \")\n        ntxt = ntxt:gsub(\" plastic \", \" \")\n        ntxt = ntxt:gsub(\" product$\", \" \")\n        ntxt = ntxt:gsub(\" Product$\", \" \")\n        ntxt = ntxt:gsub(\" Container \", \" Ctnr \")    \n    \n    return ntxt\nend\n\nfor index,id in ipairs(elementIdList) do\n    elementType = core_unit[1].getElementDisplayNameById(id):lower()\n    \n    if (elementType:find(\"metalwork industry\")) then\n            if (elementType:find(\"basic\")) then \n            table.insert(metalwork1,id)  metalwork_count[1] = metalwork_count[1] + 1        \n            elseif (elementType:find(\"uncommon\")) then \n            table.insert(metalwork2,id)  metalwork_count[2] = metalwork_count[2] + 1 \n            elseif (elementType:find(\"advanced\")) then\n            table.insert(metalwork3,id) metalwork_count[3] = metalwork_count[3] + 1\n            elseif (elementType:find(\"rare\")) then\n            table.insert(metalwork4,id)  metalwork_count[4] = metalwork_count[4] + 1\n            end\n    end\n    if (elementType:find(\"electronics industry\")) then\n            if (elementType:find(\"basic\")) then\n            table.insert(electronics1,id)  electronics_count[1] = electronics_count[1] + 1\n            elseif (elementType:find(\"uncommon\")) then\n            table.insert(electronics2,id)  electronics_count[2] = electronics_count[2] + 1\n            elseif (elementType:find(\"advanced\")) then\n            table.insert(electronics3,id)  electronics_count[3] = electronics_count[3] + 1\n            elseif (elementType:find(\"rare\")) then \n            table.insert(electronics4,id)  electronics_count[4] = electronics_count[4] + 1\n            end\n    end \n    if (elementType:find(\"glass furnace\")) then\n            if (elementType:find(\"basic\")) then  \n            table.insert(glass1,id)  glass_count[1] = glass_count[1] + 1\n            elseif (elementType:find(\"uncommon\")) then \n            table.insert(glass2,id)  glass_count[2] = glass_count[2] + 1\n            elseif (elementType:find(\"advanced\")) then \n            table.insert(glass3,id)  glass_count[3] = glass_count[3] + 1\n            elseif (elementType:find(\"rare\")) then \n            table.insert(glass4,id)  glass_count[4] = glass_count[4] + 1\n            end\n    end \n    if (elementType:find(\"3d printer\")) then\n            if (elementType:find(\"basic\")) then \n            table.insert(printer1,id)  printer_count[1] = printer_count[1] + 1\n            elseif (elementType:find(\"uncommon\")) then \n            table.insert(printer2,id)  printer_count[2] = printer_count[2] + 1\n            elseif (elementType:find(\"advanced\")) then \n            table.insert(printer3,id)  printer_count[3] = printer_count[3] + 1\n            elseif (elementType:find(\"rare\")) then \n            table.insert(printer4,id)  printer_count[4] = printer_count[4] + 1\n            end\n    end\n    if (elementType:find(\"chemical industry\")) then\n            if (elementType:find(\"basic\")) then \n            table.insert(chemical1,id)  chemical_count[1] = chemical_count[1] + 1\n            elseif (elementType:find(\"uncommon\")) then \n            table.insert(chemical2,id)  chemical_count[2] = chemical_count[2] + 1\n            elseif (elementType:find(\"advanced\")) then \n            table.insert(chemical3,id)  chemical_count[3] = chemical_count[3] + 1\n            elseif (elementType:find(\"rare\")) then \n            table.insert(chemical4,id)  chemical_count[4] = chemical_count[4] + 1\n            end\n    end\n    if (elementType:find(\"refiner\")) and not (elementType:find(\"honeycomb\")) then\n            if (elementType:find(\"basic\")) then \n            table.insert(refiner1,id)  refiner_count[1] = refiner_count[1] + 1\n            elseif (elementType:find(\"uncommon\")) then \n            table.insert(refiner2,id)  refiner_count[2] = refiner_count[2] + 1\n            elseif (elementType:find(\"advanced\")) then \n            table.insert(refiner3,id)  refiner_count[3] = refiner_count[3] + 1\n            elseif (elementType:find(\"rare\")) then \n            table.insert(refiner4,id)  refiner_count[4] = refiner_count[4] + 1\n            end\n    end\n    if (elementType:find(\"smelter\")) then\n            if (elementType:find(\"basic\")) then \n            table.insert(smelter1,id)  smelter_count[1] = smelter_count[1] + 1\n            elseif (elementType:find(\"uncommon\")) then \n            table.insert(smelter2,id)  smelter_count[2] = smelter_count[2] + 1\n            elseif (elementType:find(\"advanced\")) then \n            table.insert(smelter3,id)  smelter_count[3] = smelter_count[3] + 1\n            elseif (elementType:find(\"rare\")) then \n            table.insert(smelter4,id)  smelter_count[4] = smelter_count[4] + 1\n            end\n    end\n    if (elementType:find(\"assembly line\")) then\n            if (elementType:find(\"basic\")) then \n            table.insert(assembly1,id)  assembly_count[1] = assembly_count[1] + 1\n            elseif (elementType:find(\"uncommon\")) then \n            table.insert(assembly2,id)  assembly_count[2] = assembly_count[2] + 1\n            elseif (elementType:find(\"advanced\")) then \n            table.insert(assembly3,id)  assembly_count[3] = assembly_count[3] + 1\n            elseif (elementType:find(\"rare\")) then \n            table.insert(assembly4,id)  assembly_count[4] = assembly_count[4] + 1\n            end\n    end\n    if (elementType:find(\"honeycomb\")) then\n            if (elementType:find(\"basic\")) then \n            table.insert(honey1,id)  honey_count[1] = honey_count[1] + 1\n            elseif (elementType:find(\"uncommon\")) then \n            table.insert(honey2,id)  honey_count[2] = honey_count[2] + 1\n            elseif (elementType:find(\"advanced\")) then \n            table.insert(honey3,id)  assembly_count[3] = honey_count[3] + 1\n            elseif (elementType:find(\"rare\")) then \n            table.insert(honey4,id)  honey_count[4] = honey_count[4] + 1\n            end\n    end\n    if (elementType:find(\"recycler\")) then\n            if (elementType:find(\"basic\")) then \n            table.insert(recycler1,id)  recycler_count[1] = recycler_count[1] + 1\n            elseif (elementType:find(\"uncommon\")) then \n            table.insert(recycler2,id)  recycler_count[2] = recycler_count[2] + 1\n            elseif (elementType:find(\"advanced\")) then \n            table.insert(recycler3,id)  recycler_count[3] = recycler_count[3] + 1\n            elseif (elementType:find(\"rare\")) then \n            table.insert(recycler4,id)  recycler_count[4] = recycler_count[4] + 1\n            end\n    end\n end\n\n\n\nmetalwork_all = metalwork_count[1] + metalwork_count[2] + metalwork_count[3] + metalwork_count[4]\nelectronics_all = electronics_count[1] + electronics_count[2] + electronics_count[3] + electronics_count[4]\nglass_all = glass_count[1] + glass_count[2] + glass_count[3] + glass_count[4]\nprinter_all = printer_count[1] + printer_count[2] + printer_count[3] + printer_count[4]\nchemical_all = chemical_count[1] + chemical_count[2] + chemical_count[3] + chemical_count[4]\nrefiner_all = refiner_count[1] + refiner_count[2] + refiner_count[3] + refiner_count[4]\nsmelter_all = smelter_count[1] + smelter_count[2] + smelter_count[3] + smelter_count[4]\nassembly_all = assembly_count[1] + assembly_count[2] + assembly_count[3] + assembly_count[4]\nhoney_all = honey_count[1] + honey_count[2] + honey_count[3] + honey_count[4]\nrecycler_all = recycler_count[1] + recycler_count[2] + recycler_count[3] + recycler_count[4]\nall_count = honey_all + metalwork_all + electronics_all + glass_all + printer_all + chemical_all + refiner_all + smelter_all + assembly_all + recycler_all\n\nif all_count > 265 then system.print(\"Crazy factory detected! You will need more than 1 screen!\") \n    else system.print(\"Factory not so big, you might want to use single screen script.\") end\n\nunit.setTimer(\"refresh\",Refresh_timer)","filter":{"args":[],"signature":"onStart()","slotKey":"-1"},"key":"0"}],"methods":[],"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-5":{"name":"library","type":{"events":[],"methods":[]}},"-4":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"player","type":{"events":[],"methods":[]}},"-2":{"name":"construct","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}}}}
